<?php
define( 'RELATION_NAME_ITEM_TO_KM', 'is_part_of_knowledge_map');
define( 'DRAWING_ID_CACHE_NAME', 'knowledgemap_drawing_id_cache');

define( 'NEW_KM_ITEM_INDICATOR', '(New modal)');

module_load_include('inc', 'knowledgemap', 'knowledgemap.utils');

/**
 * Implements hook_menu.
 */
function knowledgemap_menu() {
//  //Return a list of all the KM items for a KM.
//  $items['fetch-km-items-ajax/%'] = array(
//    'page callback' => 'knowledgemap_fetch_km_items_ajax',
//    'page arguments' => array(1),
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );
  $items['show-km-item/%'] = array(
    'page callback' => 'knowledgemap_show_item',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  //Add a new item. Passing in the coords of the mouse click, and the 
  //nid of the KM that will own the new item.
  $items['add-km-item-ajax'] = array(
    'page callback' => 'knowledgemap_add_item_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
//  $items['add-km-item/%dialog_js/%/%/%'] = array(
//    'page callback' => 'knowledgemap_add_item',
//    'page arguments' => array(1, 2, 3, 4),
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );
  $items['add-done/%dialog_js'] = array(
    'page callback' => 'knowledgemap_add_done',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['edit-km-item/%'] = array(
    'page callback' => 'knowledgemap_edit_item',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['confirm-delete-km-item/%'] = array(
    'page callback' => 'knowledgemap_confirm_delete',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['delete-km-item-confirmed/%'] = array(
    'page callback' => 'knowledgemap_delete_confirmed',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_field_info(). 
 * Creates one formatter and one input widget.
 */
function knowledgemap_field_info() {
  return array(
    'knowledgemap' => array(
      'label' => t('Knowledge map'),
      'description' => 
        t('This field stores a display of a knowledge map.'),
      'default_formatter' => 'knowledgemap_formatter',
      'default_widget' => 'knowledgemap_widget',
      'instance_settings' => array(
        'default_value' => ' ',
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function knowledgemap_field_is_empty($item, $field) {
  if (!isset($item['knowledgemap']) || $item['knowledgemap'] === '') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info.
 * 
 * Describes a widget for the KM field.
 * 
 */
function knowledgemap_field_widget_info() {
    return array(
      'knowledgemap_widget' => array(
      'label' => t('Knowledge map'),
      'description' => t(
          'Allow the user to edit KMs.'),
      'field types' => array('knowledgemap'),
    ),
  );
}

/**
 * Define the widget for the KM. 
 */
function knowledgemap_field_widget_form(&$form, &$form_state, 
    $field, $instance, $langcode, $items, $delta, $element) {
  //$element contains some of the Right Stuff already. Add to it.
  $base = $element;
  //Can't add KM items on new node.
  //Is this a new node? $node is the KM node that has the widget in it.
  $new_node = TRUE;
  if ( isset( $form_state['node'] ) ) {
    if ( isset( $form_state['node']->nid ) && ! isset($node->is_new)) {
      $new_node = FALSE;
    }
  }
  if ( $new_node ) {
    $element[$delta] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('(Add KM items after knowledge map has been created.)') . '</p>',
    ) + $base;
    return $element;
  }
  //This is a node edit.
  $node = $form_state['node'];
  drupal_add_js('misc/ajax.js');
  //What is the DOM id of the drawing area?
  $nid = $node->nid;
  $drawing_dom_id 
      = knowledgemap_compute_drawing_id( $nid );
  //Cache for later.
  knowledgemap_store_in_cache( DRAWING_ID_CACHE_NAME, $drawing_dom_id );
  $output = '';
  //Make container.
  $output .= 
         knowledgemap_edit_template($drawing_dom_id);
  //Make <div> for the drawing and item areas.
  $element[$delta] = array(
    '#type' => 'markup',
    '#markup' => $output,
  ) + $base;
  //Send the map data to the JS.
  $knowledgemap_rep = knowledgemap_make_km_rep($node->nid);
  $settings = array(
    'drawing_dom_id' => $drawing_dom_id,
    'km_nid' => $nid, //The nid of the KM being shown.
    'knowledgemap_rep' => $knowledgemap_rep,
  );
  drupal_add_js(
      array('knowledgemap' => $settings),
      'setting'
  );
  //Add JS libraries.
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/libs/jsPlumb/jquery.jsPlumb-1.4.1-all-min.js', 
      'file'
  );
  drupal_add_js(
    drupal_get_path('module', 'dialog') 
        . '/jquery.xLazyLoader.js', 
    'file'
  );
  drupal_add_js(
    drupal_get_path('module', 'dialog') 
        . '/dialog.js', 
    'file'
  );
  //Add the KM drawing code.
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/js/knowledgemap_common.js', 
      'file'
  );
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/js/knowledgemap_edit.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap') 
          . '/css/knowledgemap_edit.css', 
      'file'
  );
  return $element;
}


function knowledgemap_make_km_rep($km_nid) {
  //Run the view showing KM items linked to the given KM.
  $view_results = views_get_view_result( 'items_related_to_km', 'default', $km_nid );
  //Store in array for JSONing later.
  $km_items = array();
  foreach( $view_results as $record ) {
    $nid = $record->nid;
    $title = $record->node_title;
    $body = isset( $record->field_body[0]['raw']['value'] ) 
        ? $record->field_body[0]['raw']['value'] : '';
    $coord_x = isset( $record->field_field_coord_x[0]['raw']['value'] ) 
        ? $record->field_field_coord_x[0]['raw']['value'] : '';
    $coord_y = isset( $record->field_field_coord_y[0]['raw']['value'] ) 
        ? $record->field_field_coord_y[0]['raw']['value'] : '';
    $item_type = isset( $record->field_field_item_type[0]['raw']['value'] ) 
        ? $record->field_field_item_type[0]['raw']['value'] : '';
    $km_items[] = array(
      'nid' => $nid,
      'title' => $title,
      'body' => $body,
      'coord_x' => $coord_x,
      'coord_y' => $coord_y,
      'item_type' => $item_type,
    );
  }
  //Get KM item connection data.
  $view_results = views_get_view_result(
      'km_items_linked_to_other_km_items', 
      'default', 
      $km_nid
  );
  $connections = array();
  foreach ( $view_results as $record ) {
    $entity = $record->_field_data['relation_node_rid']['entity'];
    $rid = $entity->rid;
    $from_nid = $entity->endpoints[LANGUAGE_NONE][0]['entity_id'];
    $to_nid = $entity->endpoints[LANGUAGE_NONE][1]['entity_id'];
    $required = $entity->field_required[LANGUAGE_NONE][0]['value'];
    $connections[] = array(
      'rid' => $rid,
      'from_nid' => $from_nid,
      'to_nid' => $to_nid,
      'required' => $required,
    );
  }
  return array(
    'km_items' => $km_items,
    'connections' => $connections,
  );
}

//function knowledgemap_node_view($node, $view_mode, $langcode) {
//  $r=5;
//}


function knowledgemap_add_item_ajax() {
  $title = $_POST['title'];
  $item_type = $_POST['item_type'];
  $coord_x = $_POST['coord_x'];
  $coord_y = $_POST['coord_y'];
  $km_nid = $_POST['km_nid'];
  //Make a blank node.
  global $user;
  $new_node = (object) array(
    'title' => $title, 
    'uid' => $user->uid, 
    'name' => (isset($user->name) ? $user->name : ''), 
    'type' => 'knowledge_map_item', 
    'language' => LANGUAGE_NONE,
  );
  //Store the mouse coords in the new item.
  $new_node->field_coord_x[LANGUAGE_NONE][0]['value'] = $coord_x;
  $new_node->field_coord_y[LANGUAGE_NONE][0]['value'] = $coord_y;
  $new_node->field_item_type[LANGUAGE_NONE][0]['value'] = $item_type;
  node_save($new_node);
  $new_node_id = $new_node->nid;
  //Check for fail here.
  //Add a new relation.
  $endpoints = array(
    array('entity_type' => 'node', 'entity_id' => $new_node_id),
    array('entity_type' => 'node', 'entity_id' => $km_nid),
  );
  //Create new relation object.
  $new_relation = relation_create(RELATION_NAME_ITEM_TO_KM, $endpoints);
  //Save it.
  $rid = relation_save($new_relation);
  drupal_json_output( array( 
        'status' => 'success',
        'new_nid' => $new_node_id,
        'message' => 'Item created'
  ));
  drupal_exit();
}




function knowledgemap_form_alter(&$form, &$form_state, $form_id) {
  if ( $form_id == 'knowledge_map_item_node_form' ) {
    //The form could be in a modal, in which case the KM node the item
    //should be associated with is known.
    if ( $form['title']['#default_value'] == NEW_KM_ITEM_INDICATOR) {
      //The form is in a modal.
      $form['title']['#default_value'] = '';
      //Remove the widget for the relation that 
      //links the item to the knowledge map node. 
      unset( $form['field_knowledge_map'] );
      //Store whether his is an add or edit. Only the add needs
      //special treatment later, to create the relationship after the 
      //new nid is known.
      $node = $form_state['node'];
      $is_new_node = (!isset($node->nid) || isset($node->is_new));
      $node->knowledgemap_operation 
          = $is_new_node ? 'add' : 'edit';
      //Hide the coord fields.
      $form['field_coord_x']['#access'] = FALSE;
      $form['field_coord_y']['#access'] = FALSE;
      //Submit handler.
      $form['#submit'][] = 'knowledgemap_submit_item_form';
      //After build handler.
      //$form['#after_build'][] = 'knowledgemap_submit_item_form';
    }
  }
  
}

function knowledgemap_submit_item_form($form, &$form_state) {
  global $base_url;
//  $form_state['redirect'][] = $base_url . '/add-done/nojs';
//  unset($_REQUEST['destination'], $_REQUEST['edit']['destination']);
  $form_state['redirect'][] = drupal_get_destination();
  $form_state['redirect'][] = $base_url . '/add-done/nojs';

  unset($_GET['destination']);
  drupal_static_reset('drupal_get_destination');
  drupal_get_destination();
  
}

