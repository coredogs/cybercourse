<?php
/**
 * Flag showing whether the poses preview data (used with CKEditor) is dirty.
 */
define('POSES_PREVIW_DIRTY_FLAG_VAR', 'pseudents_poses_preview_dirty');
/**
 * Poses preview data used with CKEditor.
 */
define('POSES_PREVIEW_DATA_VAR', 'pseudents_poses_preview_data');

/**
 * Implements hook_help().
 */
function pseudents_help($path, $arg) {
  switch ($path) {
      // Help for another path in the block module
    case 'admin/help#pseudents':
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

//function pseudents_menu() {
//  $items['pseudent-poses'] = array(
//    'title' => 'Pseudent poses',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('booktopnav_admin_settings'),
//    'access arguments' => array('administer site configuration'),
//    'type' => MENU_LOCAL_TASK,
//  );
//  return $items;
//  
//}

/**
 * Implements hook_menu().
 */
//function pseudents_menu() {
//  $items['pseudents/sheets'] = array(
//    'title' => 'pseudent sheets',
//    'description' => 'See a list of pseudents.',
//    'page callback' => 'pseudents_show_pseudent_sheet_list',
//    'access callback' => 'pseudents_check_access_sheets',
//    'type' => MENU_NORMAL_ITEM,
//  );
//  $items['pseudents/sheets/%'] = array(
//    'title callback' => 'pseudents_sheet_title',
//    'title arguments' => array(2),
//    'description' => 'See poses for a pseudent.',
//    'page callback' => 'pseudents_show_pseudent_sheet',
//    'page arguments' => array(2),
//    'access callback' => 'pseudents_check_access_sheets',
//    'type' => MENU_NORMAL_ITEM,
//  );
//  return $items;
//}


//function pseudents_sheet_title( $nid ) {
//  $node = node_load($nid);
//  $title = t( 'pseudent sheet for @name', array('@name' => $node->title) );
//  return $title;
//}

/**
 * Implementation of hook_perm().
 */
function pseudents_permission() {
  return array(
    'administer pseudents' => array(
      'title' => t('Administer pseudents'),
      'description' => t('Create, delete, and update pseudents.')
    ),
//    'view pseudent sheets' => array(
//      'title' => t('View pseudent sheets'),
//      'description' => t('See pseudents and poses.')
//    ),
    'use pseudents in content' => array(
      'title' => t('Use pseudents in content'),
      'description' => t('Insert pseudent token in content.')
    ),
  );
}

/**
* Implements hook_entity_info_alter().
*/
//function pseudents_entity_info_alter(&$entity_info) {
//  $entity_info['node']['view modes']['pseudent_sheet'] = array(
//    'label' => t('pseudent sheet'),
//    'custom settings' => TRUE,
//  );
//}
//
//
//function pseudents_check_access_sheets() {
//  return 
//         user_access('administer pseudents') 
//      || user_access('view pseudent sheets');
//}

/**
 * Show a list of links to pseudent sheets.
 */
//function pseudents_show_pseudent_sheet_list() {
//  //Fetch pseudent data.
//  $query = new EntityFieldQuery;
//  $query
//    ->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', 'pseudent')
//    ->propertyCondition('status', 1)
//    ->propertyOrderBy('title');
//  $query_result = $query->execute();
//  //Fetch the pseudent names.
//  $pseudents = array();
//  foreach ( $query_result['node'] as $nid => $value ) {
//    $node = node_load($nid);
//    $pseudents[$nid] = $node->title;
//  }
//  //Show the pseudents.
//  $output = array();
//  if ( sizeof( $pseudents ) == 0 ) {
//    //There are no pseudents to show.
//    $output['no pseudents'] = array(
//      '#type' => 'markup',
//      '#markup' => '<p>' . t('No pseudents have been created yet.') . '</p>',
//    );
//    return $output;
//  }
//  else {
//    //There are pseudents to show.
//    $output['intro'] = array(
//      '#type' => 'markup',
//      '#markup' => 
//             '<p>' 
//           .   ( sizeof( $pseudents ) == 1 )
//                  ? t('Here is the pseudent that has been created.') 
//                  : t('Here are the pseudents that have been created.') 
//           . '</p>',
//    );
//    global $base_url;
//    foreach ( $pseudents as $nid => $title ) {
//      $output[$nid] = array(
//        '#type' => 'markup',
//        '#markup' => 
//              '<p class="pseudent-link">'
//              . l( check_plain( $title ),  
//                   $base_url . '/pseudents/sheets/' . $nid 
//                 )
//            . '</p>'
//      );
//    } 
//  } //End there are pseudents to show.
//  return $output;
//}

/**
 * Show a pseudent sheet.
 * @param integer $char_nid The nid of the pseudent to show.
 */
//function pseudents_show_pseudent_sheet( $char_nid ) {
//  //Load the node.
//  $node = node_load( $char_nid );
//  //Show it, using a special view mode.
//  $output = node_view($node, 'pseudent_sheet');
//  if ( isset( $output['#contextual_links'] ) ) {
//    unset( $output['#contextual_links'] );
//  }
//  if ( isset( $output['links'] ) ) {
//    unset( $output['links'] );
//  }
//  return $output;
//}


/**
* Implements hook_filter_info().
*/
function pseudents_filter_info() {
  $filters['filter_pseudents'] = array(
    'title' => t('Pseudents'),
    'description' => t('Replace pseudent tokens'),
    'process callback' => 'pseudents_process_filter',
  );
  return $filters;
}


function pseudents_process_filter($text, $filter, $format = 'pseudents', $langcode = 'und') {
  //Find all the pseudents on the page that are referred to.
  $regex_matches = array();
  $regex_match_count = preg_match_all("/\[\s*pseudent\s*\:\s*(.*?)\s*\]/i", 
      $text, $regex_matches);
  if ( $regex_match_count > 0 ) {
    //Look up data for those pseudents.
    $token_list = '';
    foreach( $regex_matches[1] as $key => $match ) {
      if ( $key > 0 ) {
        $token_list .= ', ';
      }
      $token_list .= '\'' . check_plain($match) . '\'';
    }
    $sql = '
        select field_token_value, field_caption_value, 
          field_image_alt, field_image_width, field_image_height,
          field_image_fid, file_managed.uri as uri
        from field_data_field_token 
          left join field_data_field_caption on 
            field_data_field_token.entity_id 
            = field_data_field_caption.entity_id
          left join field_data_field_image on 
            field_data_field_token.entity_id
            = field_data_field_image.entity_id
          inner join file_managed on file_managed.fid = field_image_fid
          inner join node on field_data_field_token.entity_id
            = node.nid
        where 
          node.status = 1
          and field_data_field_token.bundle = \'pseudent_pose\'
          and field_token_value in ( ' . $token_list . ' )
    ';
    $query_result = db_query($sql); //, array( ':token_list' => $token_list ));
    if ( $query_result->rowCount() > 0 ) {
      //Make an array of substitutions.
      //Each entry has two parts:
      //1. Token spec found in content.
      //2. Complete HTML for it.
      $substitutions = array();
      foreach ( $regex_matches[1] as $regex_key => $regex_match ) {
        //Find the token in the query result array.
        $html = '';
        foreach ( $query_result as $row ) {
          //Must have a URI.
          if ( $row->uri ) {
            if ( $regex_match == $row->field_token_value ) {
              //Compute the HTML.
              $html = _pseudents_compute_char_html( $row );
              //Add to substitutions array.
              $substitutions[] = array(
                'matched' => $regex_matches[0][$regex_key],
                  //Note: this is the entire matched text, not the token.
                'replacement' => $html,
              );
              break;
            } //End if match
          } //End there is a URI.
        } //Loop across query results.
      } //Loop across matches.
      //Apply the substitutions.
      foreach ( $substitutions as $substitution ) {
        $text = str_replace(
            $substitution['matched'], 
            $substitution['replacement'], 
            $text
        );
      }
      //Count the closing tags.
      $pattern = '/\[\s*\/\s*pseudent\s*\]/i';
        //{, white space, /, white space, 'pseudent', white space, }
      $closing_matches = array();
      $closing_tag_count = preg_match_all($pattern, $text, $closing_matches);
      if ( $closing_tag_count != $regex_match_count ) {
        drupal_set_message(
            'Please check for a missing or incorrect pseudent closing tag.', 
            'warning'
        );
      }
      //Replace the close tags.
      $text = preg_replace($pattern, '</div>', $text);
      //Store result in node object.
    } //End there were query results.
  } //End there were regex matches.
  return $text;
}

/*
 * Create HTML for a pseudent.
 */
function _pseudents_compute_char_html( $query_result ) {
  $html = 
'<div class="cyco_pseudent" markdown="1">'
  . '<div class="cyco_pseudent_figure">'
  .   '<img src="' . file_create_url( $query_result->uri ) . '" '
  .     'alt="' . t( $query_result->field_image_alt ) . '"  '
  .     'height="' . check_plain( $query_result->field_image_height ) . '" '
  .     'width="' . check_plain( $query_result->field_image_width ) . '" '
  .   '>' 
  .   '<div class="cyco_pseudent_figcaption">' 
  .     t($query_result->field_caption_value) 
  .   '</div>'
  . '</div>';
  return $html;
}


function pseudents_get_editor_previews() {
  $pseudents_preview_dirty = variable_get(POSES_PREVIW_DIRTY_FLAG_VAR, TRUE);
  if ( $pseudents_preview_dirty ) {
    _pseudents_generate_ck_select_data();
  }
  return variable_get(POSES_PREVIEW_DATA_VAR, 'none');
}

/*
 * Create HTML for a pseudent.
 */
//Bugs in markdown library's <figure> handling, so use divs above.
//function _pseudents_compute_char_html( $query_result ) {
//  $html = 
//'<div class="cyco_pseudent" markdown="1">'
//  . '<figure>'
//  .   '<img src="' . file_create_url( $query_result->uri ) . '" '
//  .     'alt="' . t( $query_result->field_image_alt ) . '"  '
//  .     'height="' . check_plain( $query_result->field_image_height ) . '" '
//  .     'width="' . check_plain( $query_result->field_image_width ) . '" '
//  .   '>' 
//  .   '<figcaption>' 
//  .     t($query_result->field_caption_value) 
//  .   '</figcaption>'
//  . '</figure>';
//  return $html;
//}


function _pseudents_generate_ck_select_data() {
  //Fetch pseudent pose data.
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'pseudent_pose')
    ->propertyCondition('status', 1)
    ->fieldOrderBy('field_token', 'value');
  $query_result = $query->execute();
  //Fetch the pseudent names.
  $pseudent_pose_previews = array();
  foreach ( $query_result['node'] as $nid => $value ) {
    $node = node_load($nid);
    $token = $node->field_token[LANGUAGE_NONE][0]['safe_value'];
    //Caption is not a required field.
    if ( isset($node->field_caption[LANGUAGE_NONE][0]['safe_value']) ) {
      $caption = $node->field_caption[LANGUAGE_NONE][0]['safe_value'];
    }
    else {
      $caption = '';
    }
    $uri = $node->field_image[LANGUAGE_NONE][0]['uri'];
    $usable_url = file_create_url( $uri );
    $preview_html = 
        '<div class="pseudents_ck_preview">'
        . '<div class="pseudents_ck_preview_image">'
        .   '<img src="' . $usable_url . '" alt="' . $caption . '">'
        .   '<div class="pseudents_ck_preview_caption">'
        .     $caption
        .   '</div>'
        .  '</div>'
        .  '<div class="pseudents_ck_preview_token">'
        .     'Token:<br>' . $token . '<br><br>'
        .  '</div>'
        .'</div>'
      ;
    $pseudent_pose_previews[] = array(
      'token' => $token,
      'caption' => $caption,
      'html' => $preview_html,
    );
  }
  if ( sizeof($pseudent_pose_previews) == 0 ) {
    variable_set(POSES_PREVIEW_DATA_VAR, 'none');
  }
  else {
    variable_set( POSES_PREVIEW_DATA_VAR, $pseudent_pose_previews );
  }
  variable_set(POSES_PREVIW_DIRTY_FLAG_VAR, FALSE);
}

function pseudents_node_update( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function pseudents_node_delete( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function pseudents_node_insert( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function _pseudents_set_dirty_flag( $node ) {
  if ( $node->type == 'pseudent_pose' ) {
    //Mark pseudent pose preview data used in editor as dirty.
    variable_set(POSES_PREVIW_DIRTY_FLAG_VAR, TRUE);
  }  
}


function pseudents_form_alter(&$form, &$form_state, $form_id) {
  // @todo Instead of checking form_id, check for a field
  //having the SWIM format? Cache the results of the check 
  //so don't run check again on this page call.
  //Not sure if this is the right approach.
  if ( stristr($form_id, 'node_form') !== FALSE ) {
    _pseudents_load_client_side_stuff();
  }
}

/**
 * Add client-side stuff the pseudent code needs.
 */
function _pseudents_load_client_side_stuff() {
  drupal_add_css(drupal_get_path('module', 'pseudents') . '/css/pseudents.css' );
  global $base_url;
  $settings = array(
    'base_url' => $base_url,
    'pose_previews' => pseudents_get_editor_previews(),
    'pose_stylesheet' => 
        drupal_get_path('module', 'pseudents') . '/css/pseudents.css',
  );
  drupal_add_js(
      array('pseudents' => $settings),
      'setting'
  );
}

/**
 * Implements hook_form_alter().
 */
function pseudents_form_pseudent_pose_node_form_alter( &$form, &$form_state ) {
  $form['#validate'][] = '_pseudent_validate_pose_form';
}

/**
 * Validate the pose data.
 */
function _pseudent_validate_pose_form( &$form, &$form_state ) {
  $token 
      = $form_state['values']['field_token'][LANGUAGE_NONE][0]['value'];
  // Verify that the token contains no disallowed pseudents.
  if ( preg_match('/[^a-z0-9_]/', $token) ) {
    form_set_error(
        'field_token', 
        t(  'Sorry, the token can contain only lowercase letters, numbers, '
          . 'and underscores (_). E.g., "alia_hi".'
        )
    );
    return;
  }
  //Check that the token in unique.
  //Find nodes using that token.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'pseudent_pose')
    ->fieldCondition('field_token', 'value', $token);
  $result = $query->execute();
  if ( isset( $result['node'] ) ) {
    //There is at least one node using the token.
    if ( sizeof($result['node']) > 1 ) {
      throw new Exception('pseudents module: duplicate tokens!');
    }
    list($nid) = array_keys($result['node']);
    //Error if it is some other node.
    if ( $form['#node']->nid != $nid ) {
      form_set_error(
          'field_token', 
          t(   'Sorry, the value "' . $token . '" is already in use. Tokens must ' 
             .  'be unique, e.g., "' . $token . '2".'
           )
      );
      return;
    }
  } // End token in use.
}


