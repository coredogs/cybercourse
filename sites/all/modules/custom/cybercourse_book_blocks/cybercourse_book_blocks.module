<?php

/**
 * Max number characters link text can be.
 */
define('CBB_MAX_CHARS', 30);

/**
 * Max number of recursion levels when generating tree menu..
 */
define('CBB_MAX_RECURSION_LEVELS', 20);

/**
 * Implements hook_block_info().
 */
function cybercourse_book_blocks_block_info() {
  $blocks = array();
  $blocks['courses'] = array(
    'info' => 'Courses',
    'cache' => DRUPAL_CACHE_CUSTOM,
  );
  $blocks['blueprints'] = array(
    'info' => 'Blueprints',
    'cache' => DRUPAL_CACHE_CUSTOM,
  );
  return $blocks;  
}

/**
 * Implements hook_block_view().
 */
function cybercourse_book_blocks_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'courses' :
      $block['subject'] = '';
      $block['content'] = _cbb_courses();
      return $block;
      break;
    case 'blueprints' :
      $block['subject'] = ''; 
      $block['content'] = _cbb_blueprints();
      return $block;
      break;
      break;
  }
}

/**
 * Create content for the courses block.
 * @global stdClass $user You know what it is.
 * @return string Content representing the block.
 */
function _cbb_courses() {
  $output = '';
  $nids = _cbb_get_nids_of_type('course');
  //Get the blueprint template nid.
  $template_nid = cccblueprint_find_template_nid('course');
  if ( $template_nid ) {
    //Remove it from the nid array.
    $index = array_search( $template_nid, $nids );
    if ( $index !== FALSE ) {
      unset( $nids[$index] );
    }
  }
  if ( sizeof( $nids ) == 0 ) {
    //Tell the user that there are no courses.
    $is_author = _cacpl_user_is_author_admin(); 
        //Is the user an author?
    return _cbb_make_empty_message('courses', $is_author);
  }
  foreach ( $nids as $nid ) {
    $rendered_tree = _cbb_make_book_tree($nid);
    $output .= $rendered_tree;
  }
  //Wrap some CSS around it.
//  $output = '<div id="cybercourse-list-block" class="tree">' . $output . '</div>';
  return $output;
}

/**
 * Find the nids for nodes of a given bundle 
 * accessible in the current domain.
 * @param string $bundle_name The name of the bundle.
 * @return array The nids.
 */
function _cbb_get_nids_of_type( $bundle_name ) {
  $nids = array();
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle_name)
    ->propertyCondition('status', 1);
  $result = $query->execute();
  if ( isset( $result['node'] ) ) {
    foreach ( $result['node'] as $nid => $value ) {
      $nids[] = $nid;
    }
  }
  return $nids;
}

/**
 * Create content for the blueprints block.
 * Exclude the blueprint template.
 * @global stdClass $user You know what it is.
 * @return string Content representing the block.
 */
function _cbb_blueprints() {
  if ( ! _cacpl_user_is_author_admin() ) {
    return NULL;
  }
  $output = '';
  $nids = _cbb_get_nids_of_type('blueprint');
  //Get the blueprint template nid.
  $template_nid = cccblueprint_find_template_nid('blueprint');
  if ( $template_nid ) {
    //Remove it from the nid array.
    $index = array_search( $template_nid, $nids );
    if ( $index !== FALSE ) {
      unset( $nids[$index] );
    }
  }
  if ( sizeof( $nids ) == 0 ) {
    //Tell the user that there are no blueprints.
    return _cbb_make_empty_message('blueprints', TRUE);
  }
  foreach ( $nids as $nid ) {
    $rendered_tree = _cbb_make_book_tree($nid);
    $output .= $rendered_tree;
  }
  //Wrap some CSS around it.
//  $output = '<div id="blueprint-list-block">' . $output . '</div>';
  return $output;
}


/**
 * Make a message to show when there are no books.
 * @param string $book_type_label_plural Book type, e.g., dolfins.
 * @param boolean $is_director Is the user a subsite director?
 * @return string Message.
 */
function _cbb_make_empty_message( $book_type_label_plural, $is_author ) {
  $message = '<p>' . t('No ') . t($book_type_label_plural) . '.</p>';
  $make_message = '';
  if ( $is_author ) {
    $make_message = 
        '<p>' .
        t('Administrators can create @type in the ', 
            array('@type' => $book_type_label_plural)
        ) . 
        l( t('control panel'), 'control-panel' ) . '.' .
        '</p>';
  }
  return $message . $make_message;
}

/**
 * Make a tree for a node
 * @param int $nid Nid.
 * @return string Content.
 */
function _cbb_make_book_tree( $nid ) {
  drupal_add_js(
      drupal_get_path('module', 'cybercourse_book_blocks') 
          . '/js/cybercourse_book_blocks.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'cybercourse_book_blocks') 
          . '/libs/bootstrap-tree/bootstrap-combined.min.css', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'cybercourse_book_blocks') 
          . '/css/cybercourse_book_blocks.css', 
      'file'
  );
  //Sent path of current page.
  global $base_url;
  $settings = array(
    'current_path' => request_path(),
    'base_url' => $base_url,
  );
  drupal_add_js(
      array('cyco_book_blocks' => $settings),
      'setting'
  );
  
  //Use cached menu?
  $cache = variable_get('_cbb_menu_cache_' . $nid, NULL);
  if ( ! is_null($cache) ) {
    return $cache;
  }
  //Regenerate the menu.
  $node = node_load($nid);
  $current_recusion_level = 0;
  $tree = array();
  $tree[$node->title] = _cybercourse_book_blocks_make_tree(
      $node->book['mlid'],
      $node->nid,
      $node->title,
      $node->status,
      $current_recusion_level
  );
  $trail = array ( current_path() );
  global $_cbb_root_path;
  $_cbb_root_path = 'node/' . $nid;
  $rendered = theme(
      'cbb_book_tree', 
      array(
        'tree' => $tree, 
        'trail' => $trail,
      )
  );
//drupal_set_message('<pre>' . $rendered . '</pre>');  
  $rendered = '<div class="tree menuTop">' . $rendered . '</div>';
  variable_set('_cbb_menu_cache_' . $nid, $rendered);
  return $rendered;
}


function cybercourse_book_blocks_node_update($node) {
  _ccbb_erase_menu_cache( $node );
}


function cybercourse_book_blocks_node_insert($node) {
  _ccbb_erase_menu_cache( $node );
}


function cybercourse_book_blocks_node_delete($node) {
  _ccbb_erase_menu_cache( $node );
}

/**
 * Erase the cache for book menu a node is in.
 */
function _ccbb_erase_menu_cache( $node ) {
  if ( isset($node->book) ) {
    $bid = $node->book['bid'];
    variable_del( '_cbb_menu_cache_' . $bid );
  }
}


/**
 * Implements hook_theme().
 * Tells Drupal about custom theme functions.
 */
function cybercourse_book_blocks_theme() {
  return array(
    
    'cbb_book_tree' => array(
      'variables' => array(
        'tree' => NULL,
        'trail' => NULL,
      ),
    ),
    
    'cbb_listitem' => array(
      'variables' => array(
        'item' => NULL,
        'link_text' => NULL,
        'path' => NULL,
        'options' => NULL,
        'state' => NULL,
        'classes' => NULL,
        'has_children' => NULL,
        'nextlevel' => NULL,
      ),
    ),

    'cbb_links' => array(
      'variables' => array(
        'link_text' => NULL,
        'path' => NULL,
        'options' => NULL,
        'state' => NULL,
        'classes' => NULL,
        'has_children' => NULL,
      ),
    ),
  );
}

function _cybercourse_book_blocks_make_tree( $mlid, $nid, $title, $published,
  $current_recusion_level ) {
  $this_level = array(); 
  $user_is_author = _cacpl_user_is_author_admin();
  //Does this user see unpublished nodes?
  if ( $published == 1 || $user_is_author  ) {
    $sql= "SELECT DISTINCT n.nid as nid, m.plid as plid, m.mlid as mlid,  
              n.title as title, n.status as status
           FROM {book} as b
           inner join {menu_links} as m ON b.mlid = m.mlid
           inner join {node} as n ON n.nid = b.nid
           WHERE m.plid = :mlid
           ORDER by m.weight, n.title
           ";
    //ATTENTION --- DB_REWRITE MISSING --- 
    $query_result = db_query($sql, array(':mlid'=>$mlid) );
    //Output the current link.
    $this_level['link'] = array(
      'path' => 'node/' . $nid,
      'link_text' => $title,
      'has_children' => 0, //Code below might change this.
      'published' => $published,
      'options' => array(
        'attributes' => array(
          'title' => $title,
        ),
      ),
    );
    $current_recusion_level++;
    if ( $current_recusion_level < CBB_MAX_RECURSION_LEVELS ){
      $children = array();
      foreach ( $query_result as $child ) {
        $children[$child->title] = _cybercourse_book_blocks_make_tree($child->mlid,
            $child->nid, $child->title, $child->status,
            $current_recusion_level );
      }
      if ( sizeof($children) > 0 ) {
        $this_level['link']['has_children'] = 1;
        $this_level['below'] = $children;
      }
    }
  } //End check for unpublished node.
  return $this_level;
}

function theme_cbb_book_tree($variables) {
  $tree = $variables['tree'];
  $trail = $variables['trail'];
  $menu_output = cbb_recursive_link_creator($tree, $trail);
  if (!empty($menu_output)) {
    $output = '';
    // We create the shell to hold the menu outside the recursive function.
//    $output .= '<!--[if IE]><div class="ie"><![endif]-->';
    $output .= '<ul class="cycobb">';
    $output .= $menu_output;
    $output .= '</ul>';
//    $output .= '<!--[if IE]></div><![endif]-->';
    return $output;
  }
}

function cbb_recursive_link_creator(
    $items = array(), 
    $trail, 
    $parentid = ''
) {
  static $menucount = 0;
  $count = 0;
  $output = '';
  $nextlevel = '';
  if ( $parentid == '' ) {
    $menucount ++;
    $parentid = $menucount;
  }
  $user_is_author = _cacpl_user_is_author_admin();
  $url_array = $trail;

  $i = 0;
  if ( ! empty($items) ) {
    foreach ( $items as $item ) {
      //Skip processing for a nonauthor trying to see an 
      //  unpublished page.
      if (    isset( $item['link'] ) 
           && ( $user_is_author || $item['link']['published'] ) 
         ) {
        $count++;
        $id = $parentid . '-' . $count;
        $classes = array();
        //All closed to begin with.
        $state = 'closed';
        $classes[] = 'closed';
        // If there are submenu items we assign the parent a class.
        if ( ! empty($item['below'])  ) {
          $nextlevel = '';
          $nextlevel = cbb_recursive_link_creator(
              $item['below'], $url_array, $id
          );
          if (!empty($nextlevel)) {
            $classes[] = 'parent_li';
          }
        }

//        if (
//                $_GET['q'] == $item['link']['path'] 
//            || (    $item['link']['path'] == '<front>' 
//                 && $_GET['q'] == variable_get('site_frontpage', 'node')
//                )
//           ) {
//          $classes[] = 'currentPage';
//        }
        if ($count == 1) {
          $classes[] = 'first';
        }
        if ($count == count($items)) {
          $classes[] = 'last';
        }
        $options = array();
        if (isset($item['link']['options'])) {
          $options = $item['link']['options'];
        }
        $output .= theme('cbb_listitem', array(
          'item' => $item,
          'id' => $id,
          'link_text' => $item['link']['link_text'],
          'path' => $item['link']['path'],
          'options' => $options,
          'state' => $state,
          'classes' => $classes,
          'has_children' => $item['link']['has_children'],
          'published' => $item['link']['published'],
          'nextlevel' => $nextlevel,
        ));
      } //End author or published page.
    } //End for.
  } //End not MT items .
  return $output;
}

/**
 * Render a list item containing one or more links.
 */
function theme_cbb_listitem($variables) {
  $item         = $variables['item'];
  $id           = $variables['id'];
  $link_text    = $variables['link_text'];
  $path         = $variables['path'];
  $options      = $variables['options'];
  $state        = $variables['state'];
  $classes      = $variables['classes'];
  $nextlevel    = $variables['nextlevel'];
  $has_children = $variables['has_children'];
  $published    = $variables['published'];
  
  if (!isset($output)) {
    $output = '';
  }
  
  //Everything hidden initially, except the root.
  $output .= '<li id="' . $id . '" ' 
      . (empty($classes) ? '>' : ' class="' . implode(' ', $classes) 
      . '" ');
  global $_cbb_root_path;
  if ( $path != $_cbb_root_path ) {
    $output .= ' style="display:none;" ';
  }
  $output .= '>';

  $output .= theme('cbb_links', array(
    'link_text' => $item['link']['link_text'], //KRM ?? $link_text?
    'path' => $path,
    'options' => $options,
    'state' => $state,
    'classes' => $classes,
    'has_children' => $has_children, //$item['link']['has_children'],
    'published' => $published,
  ));

  if (!empty($item['link']['has_children'])) {
    if (!empty($nextlevel)) {
      $output .= '<ul>';
      // If the link has children call the function on itself.
      $output .= $nextlevel;
      $output .= '</ul>';
    }
  }

  $output .= '</li>';
  return $output;
}

/**
 * Render a single link, possibly with open/close link and/or edit button.
 */
function theme_cbb_links($variables) {
  // create values from the parameter array
  $link_text    = $variables["link_text"];
  $path         = $variables["path"];
  $options      = $variables["options"];
  $state        = $variables["state"];
  $classes      = $variables["classes"];
  $has_children = $variables["has_children"];
  $published    = $variables['published'];
  
//  $parentlink = variable_get('jquerymenu_parentlink', 0);

  $icon_class = '';
  //Choose one of three icon classes.
  if ( ! $has_children ) {
    $icon_class = 'icon-stop';
  }
  else {
    $icon_class = 'icon-plus-sign';
  }
  $output = '<span title="Expand this branch"><i class="' . $icon_class . '"></i></span> ';
  //Add the unpublished marker if needed.
  $link_text = ( $published == 0 )
        ? '(u) ' . $link_text 
        : $link_text;
  //Enforce maximum length of title.
  $link_text = _cbb_max_len($link_text);
  $link = l(
      $link_text, 
      $path, 
      $options
  );
//  if ($has_children != 0) {
//    $output .= $parentlink ? $plus . $link_text : $plus . $link;
//  }
//  else {
    $output .= $link;
//  }
  return $output;
}

/**
 * Limit a string to a length. Add elipsis if too long.
 * @param string $string String to limit.
 * @return string Limited string
 */
function _cbb_max_len($string) {
  if ( strlen($string) > ( CBB_MAX_CHARS - 3 ) ) {
    $string = substr($string, 0, CBB_MAX_CHARS - 3) . '...';
  }
  return $string;
}

