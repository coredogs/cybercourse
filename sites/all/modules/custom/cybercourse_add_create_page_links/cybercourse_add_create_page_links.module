<?php

//require_once realpath( dirname(__FILE__) . 
//    '/../cybercourse_library/cybercourse_library.inc' );

/**
 * Implements hook_node_view().
 * Add page create links for authors.
 * 
 * Add parameters to URL to add kid and sib pages at the right place
 * in their book levels. Kids get added to the end of the menu.
 * Sibs get added after the page on which the clicked sib link appeared.
 */
function cybercourse_add_create_page_links_node_view_alter(&$build) {
  $node = $build['#node'];
  //Only for full view mode - not content lists.
  if ( $build['#view_mode'] != 'full' ) {
    return;
  }
  //Check that it's a content type that gets create links added.
  $relevant_content_types = array(
    'course',
    'course_page',
    'blueprint',
    'blueprint_page',
    'learning_map',
  );
  if ( ! in_array( $node->type, $relevant_content_types ) ) {
    return;
  }
  //Only for authors and admins.
  if ( ! _cacpl_user_is_author_admin() ) {
    return;
  }
  $links = array();
  //Course main page.
  if ( $node->type == 'course' ) {
    if ( !isset($node->book) ) {
      drupal_set_message('Course node not a book. Check site config.');
      return;
    }
    $links['course_kid'] = _cacpl_make_link(
        'Create child page',
        'course-page',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
  }
  //Course page.
  if ( $node->type == 'course_page' ) {
    $links['course_page_kid'] = _cacpl_make_link(
        'Create child page',
        'course-page',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['course_page_sib'] = _cacpl_make_link(
        'Create sibling page',
        'course-page',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
  }
  //Blueprint main page.
  if ( $node->type == 'blueprint' ) {
    if ( !isset($node->book) ) {
      drupal_set_message('Blueprint node not a book. Check site config.');
      return;
    }
    $links['blueprint_kid'] = _cacpl_make_link(
        'Create child page',
        'blueprint-page',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['blueprint_kid_lm'] = _cacpl_make_link(
        'Create child learning map',
        'learning-map',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );    
  }
  //Blueprint content page.
  if ( $node->type == 'blueprint_page' ) {
    $links['blueprint_page_kid'] = _cacpl_make_link(
        'Create child page',
        'blueprint-page',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['blueprint_page_kid_lm'] = _cacpl_make_link(
        'Create child learning map',
        'learning-map',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['blueprint_page_sib'] = _cacpl_make_link(
        'Create sibling page',
        'blueprint-page',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
    $links['blueprint_page_sib_lm'] = _cacpl_make_link(
        'Create sibling learning map',
        'learning-map',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
  } // End blueprint content page.
  //Learning map page.
  if ( $node->type == 'learning_map' ) {
    $links['learning_map_kid'] = _cacpl_make_link(
        'Create child page',
        'blueprint-page',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['learning_map_kid_lm'] = _cacpl_make_link(
        'Create child learning map',
        'learning-map',
        $node->book['mlid'], //Parent id for book module.
        'addkid', //Operation
        $node->book['menu_name'] //Name of the menu for this level in the book.
    );
    $links['learning_map_sib'] = _cacpl_make_link(
        'Create sibling page',
        'blueprint-page',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
    $links['learning_map_sib_lm'] = _cacpl_make_link(
        'Create sibling learning map',
        'learning-map',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
  } // End blueprint content page.
  //Blueprint content page.
  if ( $node->type == 'book_page' ) {
    if ( ! isset( $node->book )) {
      return;
    }
    $links['book_page_sib'] = _cacpl_make_link(
        'Create sibling page',
        'book-page',
        $node->book['plid'], //Parent id for book module.
        'addsib', //Operation
        $node->book['menu_name'], //Name of the menu for this level in the book.
        $node->book['mlid'] //Menu link id for the current page in the book menu.
    );
  } // End book page content page.
  if (sizeof($links) > 0 ) {
    $result = '';
    //Create each link using l().
    foreach ( $links as $link_data ) {
      //Make the link.
      $options = array();
      if ( isset($link_data['attributes']) ) {
        $options['attributes'] = $link_data['attributes'];
      }
      if ( isset($link_data['query']) ) {
        $options['query'] = $link_data['query'];
      }
      //Add to result.
      $result .= l( 
          $link_data['title'], 
          $link_data['href'], //$href,
          $options
      );
    }
    //Add links to the page build.
    $build['cacpl_links'] = array(
      '#prefix' => '<div class="create-page-links">',
      '#markup' => $result,
      '#suffix' => '</div>',
    );    
  }
  if ( isset( $build['links']['book'] ) ) {
    unset( $build['links']['book'] );
  }
  if ( isset( $build['links']['book_made_simple'] ) ) {
    unset( $build['links']['book_made_simple'] );
  }
}

/**
 * Is the logged in user an author?
 * @global stdClass $user The thing, you know.
 * @return boolean True if the user is an author.
 */
function _cacpl_user_is_author_admin() {
  global $user;
  return 
         in_array( 'author', $user->roles )
      || in_array( 'administrator', $user->roles )
      || ( isset( $user->id ) && $user->id == 1 );
}

/**
 * Create a link to add new child or sibling to a book.
 * @param string $link_text Link text.
 * @param string $content_type Content type.
 * @param int $parent_mlid mlid (menu link id) of parent.
 * @param string $op Operation (addkid or addsib)
 * @param string $book_level_menu_name Name of the menu for the book
 *     level where the new node will be added.
 * @param int $left_sib_mlid mlid of the sibling to the left of the new node.
 * @return array Data to render a link. addsib operation only.
 */
function _cacpl_make_link( $link_text, $content_type, $parent_mlid, $op, 
                            $book_level_menu_name, $left_sib_mlid = NULL ) {
  $query_params = array(
    'parent' => $parent_mlid,
    'book_op' => $op,
    'book_level_menu' => $book_level_menu_name,
  );
  if ( $op == 'addkid' ) {
    //Nothing extra to do.
  }
  else if ( $op == 'addsib') {
    if ( is_null($left_sib_mlid) ) {
      throw new Exception('_cacpl_make_link: addsib missing sib mlid');
    }
    $query_params['left_sib_mlid'] = $left_sib_mlid;
  }
  else {
    throw new Exception('_cacpl_make_link: bad operator, naughty operator');
  }
  $link_data = 
    array(
      'query' => $query_params,
      'title' => $link_text,
      'href' => 'node/add/' . $content_type,
      'attributes' => array(
        'class' => array('cybercourse-create-page-link', 'btn', 'btn-default'),
      ),
    );
  return $link_data;
}

/**
 * Implements hook_menu_local_tasks_alter().
 * Change the title of the "Reorder the book" link.
 */
function cybercourse_add_create_page_links_menu_local_tasks_alter(&$data, $router_item, $root_path){
  if ( isset($data['tabs'][0]['output'][0]['#link']['title']) ) {
    $tabs = $data['tabs'][0]['output'];
    foreach ( $tabs as $index => $item ) {
      $link = $item['#link'];
      if ( $link['title'] == 'Reorder the book' ) {
        $data['tabs'][0]['output'][$index]['#link']['title'] = 'Rearrange pages';
        return;
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Changes the book weight to add new sibling after current page.
 */
//function cybercourse_add_create_page_links_form_node_form_alter(&$form, &$form_state, $form_id) {
//  return;
//  $params = drupal_get_query_parameters(); 
//  if ( ! isset( $params['book_op'] ) || $params['book_op'] != 'addsib' ) {
//    return;
//  }
//  //Add hidden fields to form for node save.
//  $form['book_op'] = array(
//    '#type' => 'hidden',
//    '#value' => $params['book_op'],
//  );
//  $form['book_level_menu'] = array(
//    '#type' => 'hidden',
//    '#value' => $params['book_level_menu'],
//  );
//  $form['book_parent_mlid'] = array(
//    '#type' => 'hidden',
//    '#value' => $params['book_parent_mlid'],
//  );
//  $form['left_sib_mlid'] = array(
//    '#type' => 'hidden',
//    '#value' => $params['left_sib_mlid'],
//  );
//  
//  $form['#submit'][] = '_capl_form_submit';
//  
//  
//  $form['book']['weight']['#weight'] = 6;
//  
//}

/**
 * Creating a sibling. Copy data from form hidden fields into node.
 */
//function _capl_form_submit( $form, &$form_state ) {
//  return;
//  if ( $form_state['values']['book_level_menu'] ) {
//    global $poo;
//    $poo = 4;
//    return;
//    $form['#node']->book_level_menu = $form_state['values']['book_level_menu'];
//  }
//  if ( $form_state['values']['left_sib_mlid'] ) {
//    $form['#node']->left_sib_mlid = $form_state['values']['left_sib_mlid'];
//  }
//  if ( $form_state['values']['book_parent_mlid'] ) {
//    $form['#node']->book_parent_mlid = $form_state['values']['book_parent_mlid'];
//  }
//}


//function cybercourse_add_create_page_links_menu_link_insert( $link ) {
//  global $poo;
//  $menu_name = $link['menu_name'];
//  $menu_full = menu_load_links($menu_name);
//  return;
////  if ( ! isset( $node->book_level_menu ) ) {
////    return;
////  }
//  //Get data cached in hidden fields.
//  $menu_name = 'book-toc-118';  //$node->book_level_menu;
//  $left_sib_mlid = $node->left_sib_mlid;
//  $book_parent_mlid = 785;  //$node->book_parent_mlid;
//  //Rebuild menu cache.
//  //menu_cache_clear_all();
//  //Load the menu.
//  $menu_full = menu_load_links($menu_name);
//  //Only want those items at the right level in the menu.
//  $menu = array();
//  for ( $i = 0; $i < sizeof( $menu_full ); $i++ ) {
//    if ( $menu_full[$i]['plid'] == $book_parent_mlid ) {
//      $menu[] = $menu_full[$i];
//    }
//  }
//  //Sort the menu by weight and then title.
//  
//  //Set weight by inc of 2.
//  for ( $i = 0; $i < sizeof( $menu ); $i++ ) {
//    $menu[$i]['weight'] = $i * 2;
//  }
//  //Find the menu item for the newly created node.
//  $new_item_menu_index = NULL;
//  $new_nid = $node->nid;
//  for ( $i = 0; $i < sizeof( $menu ); $i++ ) {
//    list( $entity_type, $menu_item_nid ) = $menu[$i]['link_path'];
//    if ( $menu_item_nid == $new_nid ) {
//      $new_item_menu_index = $i;
//      break;
//    }
//  }
//  if ( $new_item_menu_index === NULL ) {
//    throw new Exception(
//        'cybercourse_add_create_page_links_node_insert: can\'t find 
//          new menu item menu index. nid: ' . $new_nid
//    );
//  }
//  //Find the menu item for the left sib.
//  $left_sib_menu_index = NULL;
//  for ( $i = 0; $i < sizeof( $menu ); $i++ ) {
//    if ( $menu[$i]['mlid'] == $left_sib_mlid ) {
//      $left_sib_menu_index = $i;
//      break;
//    }
//  }
//  if ( $left_sib_menu_index === NULL ) {
//    throw new Exception(
//        'cybercourse_add_create_page_links_node_insert: can\'t find 
//          left sib item menu index. mlid: ' . $left_sib_mlid
//    );
//  }
//  //Set the new item after the sib.
//  $menu[ $new_item_menu_index ]['weight'] 
//      = $menu[ $left_sib_menu_index ]['weight'] + 1;
//  //Save the menu links.
//  for ( $i = 0; $i < sizeof( $menu ); $i++ ) {
//    menu_link_save( $menu[$i] );
//  }  
//  //Rebuild menu cache.
//  menu_cache_clear_all();
//    //Remove this one?
//}
