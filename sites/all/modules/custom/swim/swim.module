<?php
/**
 * @todo Create SWIM text format at install.
 */

/**
 * Implements hook_help().
 */
function swim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#swim':
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function swim_permission() {
  return 
    array(
      'peek content' => array(
        'title' => t('Peek at content'),
        'description' => t('See what content will look like on a device.')
      ),
    );
}

/**
 * Implements hook_menu().
 */
function swim_menu() {
  $items = array();
  $items['swim-mt-peek'] = array(
    'page callback' => 'swim_mt_peek',
    'access callback' => 'user_access',
    'access arguments' => array('peek content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function swim_form_alter(&$form, &$form_state, $form_id) {
  // @todo Instead of checking form_id, check for a field
  //having the SWIM format? Cache the results of the check 
  //so don't run check again on this page call.
  //Not sure if this is the right approach.
  if ( stristr($form_id, 'node_form') !== FALSE ) {
    //Is the SWIM format being used?
    $swimInUse = TRUE; //_swim_check_swim_used( $form['#node'] );
    if (    $swimInUse 
         && user_access('peek content') 
         //&& user_access('use characters in content')
        ) {
      // todo: improve, separate access checks.
      if (module_invoke('ajax_markup', 'on')) {
        drupal_add_library('system', 'ui.dialog');
        //Load JS for doing peeks.
        drupal_add_js( drupal_get_path('module', 'swim') .'/js/swim.js' );
        drupal_add_css(drupal_get_path('module', 'swim') . '/css/swim.css' );
        //Load JS to hide things.
        //Load late, so the link to hide has been built.
        drupal_add_js(
            drupal_get_path('module', 'swim') .'/js/swim_hide_things.js',
          array(
            'group' => JS_THEME,
            'weight' => 20,
          )
        );
        //Send some settings to JS.
        global $base_url;
        $body_format_name = $form['body'][LANGUAGE_NONE][0]['#format'];
        $settings = array(
          'base_url' => $base_url,
          'format_name' => $body_format_name,
        );
        drupal_add_js(
            array('swim' => $settings),
            'setting'
        );
        //Put files CK needs in the right places.
        swim_copy_ckeditor_components();
      } //Can use Ajax markup module.
    } //Using SWIM text format.
  } //This is a node form.
}

/**
 * Make sure that the files CK needs are available in the right places.
 */
function swim_copy_ckeditor_components() {
  //Make sure that the peek plugin and the right CK config file are available.
  //Check whether the peek plugin is in the CKEditor module's plugin set. 
  $dest_parent = DRUPAL_ROOT . '/' . drupal_get_path('module', 'ckeditor') . '/plugins';
  $dest_dir = $dest_parent . '/peek';
  if ( ! file_exists($dest_dir) ) {
    //Oeek plugin needs to be copied to the right place.
    if ( ! is_writable($dest_parent) ) { 
      drupal_set_message(
            'SWIM: Cannot write peek plugin to CKEditor module\'s plugin directory. '
          . 'Please check the module\'s help.'
      );
    }
    else {
      //Copy the peek plugin dir.
      $source = DRUPAL_ROOT . '/' . drupal_get_path('module', 'swim') . '/ckeditor_custom/peek';
      swim_recurse_copy($source, $dest_dir);
      //Assume we also need to copy the ckeditor config file as well.
      //Put it in the CKEditor module dir. This will become a global setting,
      //meaning that non-SWIM configs cannot be used w/o fucking things up.      
      $dest = DRUPAL_ROOT . '/' . drupal_get_path('module', 'ckeditor') 
          . '/ckeditor.config.js';
      //Does the file already exist?
      if ( file_exists( $dest ) ) {
        //Rename the file.
        $original_file = $dest . '.original';
        if ( ! file_exists( $original_file ) ) {
          if ( ! is_writable($dest) ) { 
            drupal_set_message(
                  'SWIM: Cannot rename CKEditor module\'s existing config file. '
                . 'Please check the module\'s help.'
            );
          }
          else {
            rename($dest, $original_file);
          }
        } //Original file not renamed yet.
      }
      //Copy
      if ( ! is_writable($dest) ) { 
        drupal_set_message(
              'SWIM: Cannot copy new CKEditor config file. '
            . 'Please check the module\'s help.'
        );
      }
      $source = DRUPAL_ROOT . '/' . drupal_get_path('module', 'swim') . '/ckeditor_custom/ckeditor.config.js';
      copy($source, $dest);
    }
  }
  //Check that the ckeditor.config.js file exists.
  //This code is run independently of whether the peek plugin exsits.
  //For cases where an admin removed ckeditor.config.js manually,
  //w/o removing the peek files.
  $dest = DRUPAL_ROOT . '/' . drupal_get_path('module', 'ckeditor') 
      . '/ckeditor.config.js';
  //Does the file already exist?
  if ( ! file_exists( $dest ) ) {
      //Copy
      if ( ! is_writable($dest) ) { 
        drupal_set_message(
              'SWIM: Cannot copy new CKEditor config file. '
            . 'Please check the module\'s help.'
        );
      }
      $source = DRUPAL_ROOT . '/' . drupal_get_path('module', 'swim') . '/ckeditor_custom/ckeditor.config.js';
      copy($source, $dest);
  }    
}

/**
 * BROKEH
 * Check whether a node is using the SWIM text format.
 * @param stdClass $node Node
 * @return boolean TRUE if it is, else FALSE.
 */
function _swim_check_swim_used( $node ) {
//  $formats = filter_formats();
  $format = filter_format_load('swim');
  if (!filter_access($format)) {
    return FALSE;
  }
  $fields = field_info_instances('node', $node->type);
  foreach( $fields as $field_name => $field_info ) {
    
  }
  
    $instance = field_info_instance('node', $field_name, 'release');
  if (empty($instance['settings']['text_processing'])) {
    return FALSE;
  }
  return TRUE;
  
  //Iterate over properties.
  foreach ($node as $property => $value) {
    if ( is_array($value) && isset( $value[LANGUAGE_NONE][0] ) ) {
      foreach ( $value[LANGUAGE_NONE] as $field_value_info ) {
        if ( isset( $field_value_info['format'] ) ) {
          if ( $field_value_info['format'] == 'swim' ) {
            return TRUE;
          }
        }
        
      } //End iterate over values of field.
    }
  } //End iterate over properties.
  return FALSE;
}

/**
 * Return a page with the right media queries and such, and a place to 
 * put markup.
 * @return array Output - renderable array.
 */
function swim_mt_peek() {
  //Check perm.
  if ( !user_access('peek content') ) {
    return MENU_ACCESS_DENIED;
  }
  //Suppress the admin menu.
  if ( module_exists('admin_menu') ) {
    module_invoke('admin_menu', 'suppress');
  }
  //Return some MT content. The theme system will wrap this in stuff that
  //the theme usually wraps content in.
  return '<div id="cyco-mt-content-container"/>';
  
  
  
  //Grab the front page, and send it to the client.
  $front_url = variable_get('site_frontpage', 'node');
  $front_url = trim($front_url, '/');
  $front = explode('/', $front_url);
  $front_nid = $front[1];
  $node = node_load($front_nid);
  $renderable = node_view($node, 'full');
  return $renderable;
}

/**
 * Return the theme to use for popup windows, by inspecting the 
 * destination.
 */
function swim_custom_theme() {
  if ( current_path() == 'swim-mt-peek' ) {
    return 'cybercourse_mt';
  }
}

/**
 * When inserting an exercise into a page, use a special template that
 * strips most of the content away.
 * @param string $vars
 */
//function insert_exercise_preprocess_node(&$vars) {
//  if ($vars['node']->type == 'exercise' && $vars['view_mode'] == 'exercise_insert') {
//    $vars['theme_hook_suggestions'][] = 'node__exercise__exercise_insert';
//  }
//}


/**
* Implements hook_filter_info().
*/
function swim_filter_info() {
  $filters['filter_swim'] = array(
    'title' => t('SWIM'),
    'description' => t('Show What I Mean'),
    'process callback' => 'swim_process_filter',
  );
  return $filters;
}

/**
 * SWIM text formatter.
 * @param string $text SWIM text to translate.
 * @param type $filter
 * @param type $format
 * @param type $langcode
 * @return string Result.
 */
function swim_process_filter($text, $filter, $format = 'SWIM', $langcode = 'und') {
  //Content is stored with user-typed chars (like <) as entities. This means that
  //HTML can be typed by the user. The database stores the coded entities, 
  //along with CK's HTML (<br>s and such).  We need to convert the < and > entities
  //back into their native characters so ReST can do the right things with them.
  //Doesn't handle spaces correctly.
  $text = str_replace('&nbsp;', ' ', $text);
  //Change <br>s into nothing. The \ns after the brs are enough.
  $text = preg_replace('/\<\s*br\s*\/?\s*\>/i', '', $text);
  //Strip tags except for images, which are added by the insert module.
  //HTML the user has entered with be HTML encoded (e.g., &gt;), so won't
  //be affected.
  //Strip tags so that HTML tags that are accidentally added (through
  //pasting) don't cause ReST errors.
  $text = strip_tags($text, '<img>'); 
    //Except for img. <img> is not types by
    //user, but inserted by the insert module.
  $text = html_entity_decode($text);
  //Handle numeric codes correctly.
  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
  $text = preg_replace('/&#(\d+);/me',"chr(\\1)",$text); #decimal notation
  $text = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$text);  #hex notation
  //Place raw directive around <img>s. <img>s are inserted by CK. 
  $text = swim_wrap_imgs( $text );
  // descriptor array
  $desc = array(
      0 => array('pipe', 'r'), // 0 is STDIN for process
      1 => array('pipe', 'w'), // 1 is STDOUT for process
      2 => array('pipe', 'w') // 2 is STDERR for process - IS THIS RIGHT?
  );
  //Can't remember where this code was adapted from. Some human.
  // command to invoke markup engine
  $py_path = DRUPAL_ROOT . '/' 
      . drupal_get_path('module', 'swim') .'/python/convert_rest.py';
  $command =  'python ' . $py_path;
  // spawn the process
  $p = proc_open($command, $desc, $pipes);
  fwrite($pipes[0], $text);
  fclose($pipes[0]);
  // read the output from the engine
  $html = stream_get_contents($pipes[1]);
  // all done! Clean up
  fclose($pipes[1]);
  proc_close($p);
  return $html;
}

/**
 * Wrap img tags in ReST raw directive (stand-alone) and role (inline).
 * @param string $text Text to be treated.
 * @return string Result.
 */
function swim_wrap_imgs( $text ) {
  $pattern = '/^(.*)\<img\s*(.*)\/?\>(.*)$/im';
  $text = preg_replace_callback(
      $pattern, 
      function ($matches) {
        $left = $matches[1];
        $left_empty = (strlen(trim($left)) == 0);
        $img_properties = $matches[2];
        $right = $matches[3];
        $right_empty = (strlen(trim($right)) == 0);
        //Stand-alone or inline image?
        if ( $left_empty && $right_empty ) {
          //Use a directive
          $replacement = '.. raw:: html' . PHP_EOL . PHP_EOL 
              . '  <img ' . $img_properties . '>';
        }
        else {
          //Use a role.
          $replacement = $left . ' :raw-role:`<img ' . $img_properties . '>` ' . $right;
        }
        return $replacement;
      },
      $text
  );
  //Define raw-role.
  $text = '.. role:: raw-role(raw)' . PHP_EOL 
        . '   :format: html' . PHP_EOL 
        . PHP_EOL 
        . $text;
  return $text;
}

/**
 * User tips about the input filter.
 */
function swim_tips($filter, $format, $long = FALSE) {
  return t('Failure is not an option. It comes standard on all models.');
}

/**
 * Implements hook_preprocess_page.
 * 
 * Add "swim" class if the SWIM filter was used.
 * See https://drupal.org/node/805006
 */
function swim_process_html(&$variables) {
  //Is SWIM CSS added to the page?
  $css_path = drupal_get_path('module', 'swim') . '/css/swim.css';
  if ( array_key_exists($css_path, $variables['css']) ) {
    //Check if class not already in array.
    if ( ! in_array( 'swim', $variables['classes_array'] ) ) {
      $variables['classes_array'][] = 'swim';
      $variables['classes'] .= ' swim';
    }
  }
}

/**
 * Implements hook_block_info().
 */
function swim_block_info() {
  $blocks = array();
  $blocks['swim_markup'] = array(
    'info' => 'SWIM Markup',
  );
  return $blocks;  
}

/**
 * Implements hook_block_view().
 */
function swim_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'swim_markup' :
      $block['subject'] = 'Editing tips';
      $block['content'] = swim_markup_help();
      return $block;
      break;
  }
}

/**
 * Some help for SWIM, on node editing pages.
 * @return string
 */
function swim_markup_help() {
  $help = 
'<p>' . t('
Blank lines separate paragraphs.
') . '</p>
<p>' . t('Headings:') . '</p>
<p class="tips-code-look">
' . t('Level 1<br>
=======<br>
Level 2<br>
-------<br>
Level 3<br>
~~~~~~~
') . '</p>
<p><code>*' . t('italics') . '*</code>,
 and <code>**' . t('bold') . '**</code>.</p>
<p class="tips-code-look">&nbsp;&nbsp;&nbsp;' . t('Indented quote.') . '</p>
<p class="tips-code-look">* ' . t('Bulleted lists.') . '<br>
        * ' . t('Put blank lines') . '<br>
        * ' . t('around lists.') . '
</p>
<p class="tips-code-look">1. ' . t('A numbered list') . '<br>
1. ' . t('Is like this.') . '<br>
1. ' . t('Another one.') . '
</p>
<p>' . t('Any numbers will do.') . '
</p>

<p class="tips-code-look">.. sidebar:: Title<br><br>
' . t('&nbsp;&nbsp;&nbsp;This is a sidebar.') . '<br><br>
' . t('&nbsp;&nbsp;&nbsp;More of it.') . '
</p>
<p class="tips-code-look">.. pseudent:: aila_tea<br>
' . t('   Hi from Aila, drinking tea.') . '
</p>
<p>' . t('Link:') . '<br><small><code>' . 
      t('`Link text &lt;http://example.com/&gt;`_') . '</code></small></p>
<p>' . t('Use the peek button to see how your content will look on '
. 'different devices.') . '
</p>';
  return $help;
}

//See http://php.net/manual/en/function.copy.php
function swim_recurse_copy($src, $dst) {
  $dir = opendir($src);
  @mkdir($dst);
  while (false !== ( $file = readdir($dir))) {
    if (( $file != '.' ) && ( $file != '..' )) {
      if (is_dir($src . '/' . $file)) {
        swim_recurse_copy($src . '/' . $file, $dst . '/' . $file);
      } else {
        copy($src . '/' . $file, $dst . '/' . $file);
      }
    }
  }
  closedir($dir);
}
