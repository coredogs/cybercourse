<?php
/**
 * @todo Create SWIM text format at install.
 */



/**
 * Implements hook_help().
 */
function swim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#swim':
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function swim_permission() {
  return 
    array(
      'preview content' => array(
        'title' => t('Preview content'),
        'description' => t('See what content will look like on a device.')
      ),
    );
}

/**
 * Implements hook_menu().
 */
function swim_menu() {
  $items = array();
  $items['swim-mt-preview'] = array(
    'page callback' => 'swim_mt_preview',
    'access callback' => 'user_access',
    'access arguments' => array('preview content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function swim_form_alter(&$form, &$form_state, $form_id) {
  // @todo Instead of checking form_id, check for a field
  //having the SWIM format? Cache the results of the check 
  //so don't run check again on this page call.
  //Not sure if this is the right approach.
  if ( stristr($form_id, 'node_form') !== FALSE ) {
    //Is the SWIM format being used?
    $swimInUse = TRUE; //_swim_check_swim_used( $form['#node'] );
    if (    $swimInUse 
         && user_access('preview content') 
         //&& user_access('use characters in content')
        ) {
      // todo: improve, separate access checks.
      if (module_invoke('ajax_markup', 'on')) {
        drupal_add_library('system', 'ui.dialog');
        //Load JS for doing previews. Load it early, to set stuff up afore
        //CK does its thing.
        drupal_add_js(
            drupal_get_path('module', 'swim') .'/js/swim.js',
            array(
              'group' => JS_DEFAULT,
              'weight' => -20,
            )
        );
        drupal_add_css(drupal_get_path('module', 'swim') . '/css/swim.css' );
        //Load JS to hide things.
        //Load late, so the link to hide has been built.
        drupal_add_js(
            drupal_get_path('module', 'swim') .'/js/swim_hide_things.js',
          array(
            'group' => JS_THEME,
            'weight' => 20,
          )
        );
        //Send some settings to JS.
        global $base_url;
        $body_format_name = $form['body'][LANGUAGE_NONE][0]['#format'];
        $settings = array(
          'base_url' => $base_url,
          'format_name' => $body_format_name,
        );
        drupal_add_js(
            array('swim' => $settings),
            'setting'
        );
        //Put files CK needs in the right places.
        swim_copy_ckeditor_components();
      } //Can use Ajax markup module.
    } //Using SWIM text format.
  } //This is a node form.
}

/**
 * Make sure that the files CK needs are available in the right places.
 */
function swim_copy_ckeditor_components() {
  //Check whether ckeditor.config.js is in the theme dir. If not, copy it there.
  $dest_path = DRUPAL_ROOT . '/' . path_to_theme() . '/ckeditor.config.js';
  if ( ! file_exists($dest_path) ) {
    //Check to make sure that we can write.
    $dest_dir = DRUPAL_ROOT . '/' . path_to_theme();
    if ( ! is_writable($dest_dir) ) { 
      drupal_set_message(
            'SWIM: Cannot write ckeditor.config.js to theme directory. '
          . 'Please check the module\'s help.'
      );
    }
    else {
      $source = DRUPAL_ROOT . '/' . drupal_get_path('module', 'swim') . '/ckeditor_custom/ckeditor.config.js';
      copy($source, $dest_path);
    }
  }
  //Check whether the preview plugin is in the CKEditor module's plugin
  //set. If not, copy the files there.
  $dest_parent = DRUPAL_ROOT . '/' . drupal_get_path('module', 'ckeditor') . '/plugins';
  $dest_dir = $dest_parent . '/preview';
  if ( ! file_exists($dest_dir) ) {
    if ( ! is_writable($dest_parent) ) { 
      drupal_set_message(
            'SWIM: Cannot write preview plugin to CKEditor module\'s plugin directory. '
          . 'Please check the module\'s help.'
      );
    }
    else {
      $source = DRUPAL_ROOT . '/' . drupal_get_path('module', 'swim') . '/ckeditor_custom/preview';
      swim_recurse_copy($source, $dest_dir);
    }
  }
}

/**
 * BROKEH
 * Check whether a node is using the SWIM text format.
 * @param stdClass $node Node
 * @return boolean TRUE if it is, else FALSE.
 */
function _swim_check_swim_used( $node ) {
//  $formats = filter_formats();
  $format = filter_format_load('swim');
  if (!filter_access($format)) {
    return FALSE;
  }
  $fields = field_info_instances('node', $node->type);
  foreach( $fields as $field_name => $field_info ) {
    
  }
  
    $instance = field_info_instance('node', $field_name, 'release');
  if (empty($instance['settings']['text_processing'])) {
    return FALSE;
  }
  return TRUE;
  
  //Iterate over properties.
  foreach ($node as $property => $value) {
    if ( is_array($value) && isset( $value[LANGUAGE_NONE][0] ) ) {
      foreach ( $value[LANGUAGE_NONE] as $field_value_info ) {
        if ( isset( $field_value_info['format'] ) ) {
          if ( $field_value_info['format'] == 'swim' ) {
            return TRUE;
          }
        }
        
      } //End iterate over values of field.
    }
  } //End iterate over properties.
  return FALSE;
}

/**
 * Return a page with the right media queries and such, and a place to 
 * put markup.
 * @return array Output - renderable array.
 */
function swim_mt_preview() {
  //Check perm.
  if ( !user_access('preview content') ) {
    return MENU_ACCESS_DENIED;
  }
  //Grab the front page, and send it to the client.
  $front_url = variable_get('site_frontpage', 'node');
  $front_url = trim($front_url, '/');
  $front = explode('/', $front_url);
  $front_nid = $front[1];
  $node = node_load($front_nid);
  $renderable = node_view($node, 'full');
  return $renderable;
}

/**
* Implements hook_filter_info().
*/
function swim_filter_info() {
  $filters['filter_swim'] = array(
    'title' => t('SWIM'),
    'description' => t('Show What I Mean'),
    'process callback' => 'swim_process_filter',
  );
  return $filters;
}

/**
 * SWIM text formatter.
 * @param string $text SWIM text to translate.
 * @param type $filter
 * @param type $format
 * @param type $langcode
 * @return string Result.
 */
function swim_process_filter($text, $filter, $format = 'SWIM', $langcode = 'und') {
  //Content is stored with user-typed chars (like <) escaped. This means that
  //HTML can be typed by the user. The database stores the coded entities, 
  //along with CK's HTML (<br>s and such). 
  //Doesn't handle spaces correctly.
  $text = str_replace('&nbsp;', ' ', $text);
  $text = strip_tags($text, '<img>'); //Except for img.
  $text = html_entity_decode($text);
  //Handle numeric codes correctly.
  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
  $text= preg_replace('/&#(\d+);/me',"chr(\\1)",$text); #decimal notation
  $text= preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$text);  #hex notation
  // descriptor array
  $desc = array(
      0 => array('pipe', 'r'), // 0 is STDIN for process
      1 => array('pipe', 'w'), // 1 is STDOUT for process
      2 => array('pipe', 'w') // 2 is STDERR for process - IS THIS RIGHT?
  );
  //Can't remember where this code was adapted from. Some human.
  // command to invoke markup engine
  $py_path = $_SERVER["DOCUMENT_ROOT"] . '/' 
      . drupal_get_path('module', 'swim') .'/python/convert_rest.py';
  $command =  'python ' . $py_path;
  // spawn the process
  $p = proc_open($command, $desc, $pipes);
  fwrite($pipes[0], $text);
  fclose($pipes[0]);
  // read the output from the engine
  $html = stream_get_contents($pipes[1]);
  // all done! Clean up
  fclose($pipes[1]);
  proc_close($p);
  return $html;
}

/**
 * User tips about the input filter.
 */
function swim_tips($filter, $format, $long = FALSE) {
  return t('Failure is not an option. It comes standard on all models.');
}

/**
 * Implements hook_preprocess_page.
 * 
 * Add "swim" class if the SWIM filter was used.
 * See https://drupal.org/node/805006
 */
function swim_process_html(&$variables) {
  //Is SWIM CSS added to the page?
  $css_path = drupal_get_path('module', 'swim') . '/css/swim.css';
  if ( array_key_exists($css_path, $variables['css']) ) {
    //Check if class not already in array.
    if ( ! in_array( 'swim', $variables['classes_array'] ) ) {
      $variables['classes_array'][] = 'swim';
      $variables['classes'] .= ' swim';
      //Add JS code to help render SWIM stuff.
      drupal_add_js(
          drupal_get_path('module', 'swim') 
              . '/js/swim_render.js', 
          'file'
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function swim_block_info() {
  $blocks = array();
  $blocks['swim_markup'] = array(
    'info' => 'SWIM Markup',
  );
  return $blocks;  
}

/**
 * Implements hook_block_view().
 */
function swim_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'swim_markup' :
      $block['subject'] = 'Editing tips';
      $block['content'] = swim_markup_help();
      return $block;
      break;
  }
}

/**
 * Some help for SWIM, on node editing pages.
 * @return string
 */
function swim_markup_help() {
  $help = 
'<p>' . t('
Blank lines separate paragraphs. Press Enter twice to make one.
') . '</p>
<p class="tips-code-look">' . t('Sections:<br>
Animals<br>
=======<br>
Mammals<br>
-------<br>
Dogs<br>
~~~~<br>
Cats<br>
~~~~<br>
Birds<br>
-----<br>
Swans<br>
~~~~~<br>
Plants<br>
======
') . '</p>
<p>' . t('Inline markup like ') . '<code>*' . t('italics') . '*</code>,
 and <code>**' . t('bold') . '**</code>.</p>
<p class="tips-code-look">&nbsp;&nbsp;&nbsp;' . t('Indented quote.') . '</p>
<p class="tips-code-look">* ' . t('Bulleted lists.') . '<br>
        * ' . t('Put blank lines') . '<br>
        * ' . t('around lists.') . '
</p>
<p class="tips-code-look">1. ' . t('A numbered list') . '<br>
1. ' . t('Is like this.') . '<br>
1. ' . t('Another one.') . '
</p>
<p>' . t('Any numbers will do.') . '
</p>

<p class="tips-code-look">.. sidebar:: Title<br><br>
' . t('&nbsp;&nbsp;&nbsp;This is a sidebar.') . '<br><br>
' . t('&nbsp;&nbsp;&nbsp;More of it.') . '
</p>
<p class="tips-code-look">.. pseudent:: aila_tea<br>
' . t('   Hi from Aila, drinking tea.') . '
</p>
<p>' . t('Link:') . '<br><small><code>' . 
      t('`Link text &lt;http://example.com/&gt;`_') . '</code></small></p>
<p>' . t('Use the preview button to see how your content will look on '
. 'different devices.') . '
</p>
<p>' . t('See the <a href="http://cybercour.se/wiki/swim">CyberCourse wiki</a> for more.') . '
</p>';
  return $help;
}

//See http://php.net/manual/en/function.copy.php
function swim_recurse_copy($src, $dst) {
  $dir = opendir($src);
  @mkdir($dst);
  while (false !== ( $file = readdir($dir))) {
    if (( $file != '.' ) && ( $file != '..' )) {
      if (is_dir($src . '/' . $file)) {
        swim_recurse_copy($src . '/' . $file, $dst . '/' . $file);
      } else {
        copy($src . '/' . $file, $dst . '/' . $file);
      }
    }
  }
  closedir($dir);
}

