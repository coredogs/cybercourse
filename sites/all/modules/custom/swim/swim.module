<?php
/**
 * @todo Create SWIM text format at install.
 */



/**
 * Implements hook_help().
 */
function swim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#swim':
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function swim_permission() {
  return 
    array(
      'preview content' => array(
        'title' => t('Preview content'),
        'description' => t('See what content will look like on a device.')
      ),
    );
}

/**
 * Implements hook_menu().
 */
function swim_menu() {
  $items = array();
  $items['swim-mt-preview'] = array(
    'page callback' => 'swim_mt_preview',
    'access callback' => 'user_access',
    'access arguments' => array('preview content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function swim_form_alter(&$form, &$form_state, $form_id) {
  // @todo Instead of checking form_id, check for a field
  //having the SWIM format? Cache the results of the check 
  //so don't run check again on this page call.
  //Not sure if this is the right approach.
  if ( stristr($form_id, 'node_form') !== FALSE ) {
    //Is the SWIM format being used?
    $swimInUse = TRUE; //_swim_check_swim_used( $form['#node'] );
    if (    $swimInUse 
         && user_access('preview content') 
         //&& user_access('use characters in content')
        ) {
      // todo: improve, separate access checks.
      if (module_invoke('ajax_markup', 'on')) {
        drupal_add_library('system', 'ui.dialog');
        //Load JS for doing previews. Load it early, to set stuff up afore
        //CK does its thing.
        drupal_add_js(
            drupal_get_path('module', 'swim') .'/js/swim.js',
            array(
              'group' => JS_DEFAULT,
              'weight' => -20,
            )
        );
        drupal_add_css(drupal_get_path('module', 'swim') . '/css/swim.css' );
//        if ( module_exists( 'characters' ) ) {
//          drupal_add_css(drupal_get_path('module', 'characters') . '/css/characters.css' );
//        }
        //Load JS to hide things.
        //Load late, so the link to hide has been built.
        drupal_add_js(
            drupal_get_path('module', 'swim') .'/js/swim_hide_things.js',
          array(
            'group' => JS_THEME,
            'weight' => 20,
          )
        );
        //Send some settings to JS.
        global $base_url;
        $body_format_name = $form['body'][LANGUAGE_NONE][0]['#format'];
        $settings = array(
          'base_url' => $base_url,
          'format_name' => $body_format_name,
        );
//        if ( module_exists( 'characters' ) ) {
//          //Pose preview data.
//          $settings['pose_previews'] = characters_get_editor_previews();
//          $settings['pose_stylesheet'] = 
//              drupal_get_path('module', 'characters') . '/css/characters.css';
//        }
        drupal_add_js(
            array('swim' => $settings),
            'setting'
        );
        $form['#submit'][] = '_swim_content_submitted';
      } //Can use Ajax markup module.
    } //Using SWIM text format.
  } //This is a node form.
}

/**
 * BROKEH
 * Check whether a node is using the SWIM text format.
 * @param stdClass $node Node
 * @return boolean TRUE if it is, else FALSE.
 */
function _swim_check_swim_used( $node ) {
//  $formats = filter_formats();
  $format = filter_format_load('swim');
  if (!filter_access($format)) {
    return FALSE;
  }
  $fields = field_info_instances('node', $node->type);
  foreach( $fields as $field_name => $field_info ) {
    
  }
  
    $instance = field_info_instance('node', $field_name, 'release');
  if (empty($instance['settings']['text_processing'])) {
    return FALSE;
  }
  return TRUE;
  
  //Iterate over properties.
  foreach ($node as $property => $value) {
    if ( is_array($value) && isset( $value[LANGUAGE_NONE][0] ) ) {
      foreach ( $value[LANGUAGE_NONE] as $field_value_info ) {
        if ( isset( $field_value_info['format'] ) ) {
          if ( $field_value_info['format'] == 'swim' ) {
            return TRUE;
          }
        }
        
      } //End iterate over values of field.
    }
  } //End iterate over properties.
  return FALSE;
}


function _swim_content_submitted( $form, &$form_state ){
  $r=6;
}

/**
 * Return a page with the right media queries and such, and a place to 
 * put markup.
 * @return array Output - renderable array.
 */
function swim_mt_preview() {
  //Check perm.
  if ( !user_access('preview content') ) {
    return MENU_ACCESS_DENIED;
  }
  //Grab the front page, and send it to the client.
  $front_url = variable_get('site_frontpage', 'node');
  $front_url = trim($front_url, '/');
  $front = explode('/', $front_url);
  $front_nid = $front[1];
  $node = node_load($front_nid);
  $renderable = node_view($node, 'full');
  return $renderable;
}

/**
* Implements hook_filter_info().
*/
function swim_filter_info() {
  $filters['filter_swim'] = array(
    'title' => t('SWIM'),
    'description' => t('Show What I Mean'),
    'process callback' => 'swim_process_filter',
  );
  return $filters;
}

require_once drupal_get_path('module', 'swim') .'/libs/markdown_extra/Markdown.php';
require_once drupal_get_path('module', 'swim') .'/libs/markdown_extra/MarkdownExtra.php';

function swim_process_filter($text, $filter, $format = 'SWIM', $langcode = 'und') {
  //Content is stored with user-typed chars (like <) escaped. This means that
  //HTML can be typed by the user. The database stores the coded entities, 
  //along with CK's HTML (<br>s and such). 
  $text = strip_tags($text, '<img>');
  $text = htmlspecialchars_decode($text);
  //Doesn't handle spaces correctly.
  $text = str_replace('&nbsp;', ' ', $text);
  //Do the asides.
  $pattern = '/\[\s*aside\s*\]/i';
    // {, white space, aside, white space, }
  $text = preg_replace($pattern, '<aside class="swim" markdown="1">', $text);
  $pattern = '/\[\s*\/\s*aside\s*\]/i';
    // {, white space, /, white space, aside, white space, }
  $text = preg_replace($pattern, '</aside>', $text);
  $html = \Michelf\MarkdownExtra::defaultTransform($text);  
  return $html;
}

function swim_tips($filter, $format, $long = FALSE) {
  return t('Failure is not an option. It comes standard.');
}



/**
 * Implements hook_block_info().
 */
function swim_block_info() {
  $blocks = array();
  $blocks['swim_markup'] = array(
    'info' => 'SWIM Markup',
  );
  return $blocks;  
}

/**
 * Implements hook_block_view().
 */
function swim_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'swim_markup' :
      $block['subject'] = 'Editing tips';
      $block['content'] = _swim_markup_help();
      return $block;
      break;
  }
}

function _swim_markup_help() {
  $help = 
'<p>' . t('
Blank lines separate paragraphs. Press Enter twice to make one.
') . '</p>
<p class="code-look">' . t('# Header 1<br>
## Header 2<br>
### Header 3<br>
#### Header 4<br>
##### Header 5
') . '</p>
<p>' . t('Inline markup like ') . '<code>_' . t('italics') . '_</code>,
 and <code>**' . t('bold') . '**</code>.</p>
<p class="code-look"> > ' . t('This is a quote.') . '</p>
<p class="code-look">* ' . t('Bulleted lists.') . '<br>
        * ' . t('Put blank lines') . '<br>
        * ' . t('around them.') . '
</p>
<p class="code-look">1. ' . t('A numbered list') . '<br>
1. ' . t('Is like this.') . '<br>
1. ' . t('Another one.') . '
</p>
<p>' . t('Any numbers will do.') . '
</p>
<p>' . t('Sometimes you want numbers, not a list. If you want to show:') . '<br><br>
' . t('1969. The moon landings.') . '<br><br>
' . t('Type:') . '<br><br>
<code>' . t('1969\. The moon landings.') . '</code>
</p>

<p>' . t('Horizontal rule:') . '<br>
<code>----</code>
</p>
<p class="code-look">[aside]<br>' . t('This is an aside.') . '<br>
' . t('More of it.') . '<br>
[/aside]
</p>
<p class="code-look">[character:aila_tea]<br>
' . t('Hi from Aila, drinking tea.') . '<br>
[/character]
</p>
<p>' . t('Link:') . '<br><small><code>' . 
      t('[CyberCourse](http://cybercour.se)') . '</code></small></p>
<p>' . t('Use the preview button to see how your content will look on '
. 'different devices.') . '
</p>
<p>' . t('See the <a href="http://cybercour.se/wiki/swim">CyberCourse wiki</a> for more.') . '
</p>';
  return $help;
}

