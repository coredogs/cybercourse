<?php
/**
 * Defines a field to represent the display of a knowledge
 * map. 
 * 
 * The widget is an editable map. It has the display on the left, 
 * and the selected KM item on the right. THe KM item has an 
 * edit button that opens a modal form.
 * 
 * The formatter is display only. The server creates a hole for 
 * the display, includes some JS to display a map, generates an array representing
 * the map, and sends the array to the JS.
 * 
 * The DOM id of the HTML element showing the map is
 * "km-{id of containing entity}-drawing".
 * 
 * The DOM id of the HTML element showing the selected item (widget only)
 * is "km-{id of containing entity}-selected".
 * 
 */

define( 'RELATION_NAME_ITEM_TO_KM', 'is_part_of_knowledge_map');
define( 'DRAWING_ID_CACHE_NAME', 'knowledgemap_display_drawing_id_cache');
define( 'ITEM_ID_CACHE_NAME', 'knowledgemap_display_selected_id_cache');

//DOM element ids used to send data about user's click location the the server.
define('LINK_ID_X_COORD', 'sendback-x-');
define('LINK_ID_Y_COORD', 'sendback-y-');
define('LINK_ID_KM_NID_COORD', 'sendback-km_nid-');

/**
 * Implements hook_menu.
 */
function knowledgemap_display_menu() {
  $items['show-item/%'] = array(
    'page callback' => 'knowledgemap_display_show_item',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['add-item'] = array(
    'page callback' => 'knowledgemap_display_add_item',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['edit-item/%'] = array(
    'page callback' => 'knowledgemap_display_edit_item',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['confirm-delete-item/%'] = array(
    'page callback' => 'knowledgemap_display_confirm_delete',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['delete-item-confirmed/%'] = array(
    'page callback' => 'knowledgemap_display_delete_confirmed',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function knowledgemap_display_field_info() {
  return array(
    'knowledgemap_display' => array(
      'label' => t('Knowledge map display'),
      'description' => 
        t('This field stores a display of a knowledge map.'),
      'default_formatter' => 'knowledgemap_display_formatter',
      'default_widget' => 'knowledgemap_display_widget',
      'instance_settings' => array(
        'default_value' => ' ',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
/*
function knowledgemap_display_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $element = array();
  $element['dom_id'] = array(
    '#type' => 'textfield',
    '#title' => t('DOM id'),
    '#description' => t('Used by CSS and JS code to refer to this element.'),
    '#default_value' => isset($settings['dom_id']) ? $settings['dom_id'] : '',
    '#multiple' => FALSE,
  );
  return $element;
}
 */

/**
 * Implements hook_field_is_empty().
 */
function knowledgemap_display_field_is_empty($item, $field) {
  if (!isset($item['knowledgemap_display']) || $item['knowledgemap_display'] === '') {
    return TRUE;
  }
  return FALSE;
}


/**
* Prepare an item for viewing. Create an array of Drupal Ajax commands
* that will show the node.
* @param integer $nid Node id. 
* @return array Commands from the Drupal Ajax framework.
*/
function knowledgemap_display_prepare_item_display( $nid ) {
  //Load ctools files.
  knowledgemap_display_load_ctools_stuff('show');
  //Prep the node view.
  $node = node_load($nid);
  $build = node_view($node);
  //Todo: Theme away the clickable link on the node title.
  $node_output = theme("node", $build);
  $node_output = str_replace(array("\r", "\n"), "", $node_output);
  //Set up edit and delete links.
  $edit_link = ctools_modal_text_button(
      t('Edit'), 
      'edit-node/' . $nid, 
      t('Change this item')
  );
  $delete_link = ctools_modal_text_button(
      t('Delete'), 
      'confirm-delete-node/' . $nid, 
      t('Remove this item')
  );
  //Get the DOM id of the item display area from the cache.
  $item_dom_id = knowledgemap_display_uncache( ITEM_ID_CACHE_NAME );
  //Get the DOM id of the item display area from the cache.
  $drawing_dom_id = knowledgemap_display_uncache( DRAWING_ID_CACHE_NAME );
  //Fill template.
  $output = knowledgemap_display_fill_item_display_template(
      $item_dom_id, $edit_link, $delete_link, $node_output
  );
  $commands = array();
  //Show the node display.
  $commands[] = ajax_command_html(
      '#' . $item_dom_id, 
      $output
  );
  return $commands;
}

function knowledgemap_display_empty_drawing_display_template(
    $drawing_dom_id) {
  $output = '<div id="' . $drawing_dom_id . '" class="km-drawing">
       </div>';
  return $output;
}

function knowledgemap_display_empty_item_details_template($item_dom_id) {
  $output = '
    <div id="' . $item_dom_id . '" class="km-item-details">
    </div>';
  return $output;
}

function knowledgemap_display_fill_item_display_template(
    $item_dom_id, $edit_link, $delete_link, $node_output) {
  $output = '
      <div class="km-toolbar">'
       . $edit_link . $delete_link . '
      </div>
      <div class="displayed-km-item">
        ' . $node_output . '
    </div>';
  $output = str_replace(array("\r", "\n"), "", $output);
  return $output;
}


function knowledgemap_display_node_view_alter(&$build) {
  unset($build['#contextual_links']);
}


function knowledgemap_display_field_widget_info() {
    return array(
      'knowledgemap_display_widget' => array(
      'label' => t('Knowledge map display'),
      'description' => t(
          'Allow the user to edit KMs.'),
      'field types' => array('knowledgemap_display'),
    ),
  );
}

function knowledgemap_display_field_widget_form(&$form, &$form_state, 
    $field, $instance, $langcode, $items, $delta, $element) {
  //$element contains some of the Right Stuff already. Add to it.
  $base = $element;
  //Can't add items on new node.
  //Is this a new node? This is the KM node that has the widget in it.
  $node = $form_state['node'];
  $new_node = (!isset($node->nid) || isset($node->is_new));
  if ( $new_node ) {
    $element[$delta] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('(Add items after knowledge map has been created.)') . '</p>',
    ) + $base;
    return $element;
  }
  //This is a node edit.
  drupal_add_js('misc/ajax.js');
  //What is the DOM id of the drawing area?
  $nid = $node->nid;
  $drawing_dom_id 
      = knowledgemap_display_compute_drawing_id( $nid );
  //Cache for later.
  knowledgemap_display_cache( DRAWING_ID_CACHE_NAME, $drawing_dom_id );
  //What is the DOM id of the selected item area?
  $item_dom_id 
      = knowledgemap_display_compute_item_id( $nid );
  //Cache for later.
  knowledgemap_display_cache( ITEM_ID_CACHE_NAME, $item_dom_id );
  knowledgemap_display_load_ctools_stuff( 'show' );
  $output = '';
  //Make modally add button.
  $add_link = ctools_modal_text_button(
      t('Add'), 
      'add-item', 
      t('Add a new item')
  );
  $form['hidden_add_link'] = array(
    '#markup' => '
      <div style="display:none" id="km_hidden_add_link">
        ' . $add_link . '
      </div>',
  );
  //Wrap in container for styling.
  $output .= 
         knowledgemap_display_empty_drawing_display_template(
             $drawing_dom_id)
       . knowledgemap_display_empty_item_details_template($item_dom_id);   
  //Make <div> for the drawing and item areas.
  $element[$delta] = array(
    '#type' => 'markup',
    '#markup' => $output,
  ) + $base;
  //Send the DOM ids and other things to the JS.
  $knowledgemap_rep = array(); //knowledgemap_display_make_km_rep($node->nid);
  $settings = array(
    'drawing_dom_id' => $drawing_dom_id,
    'item_dom_id' => $item_dom_id,
    'km_nid' => $nid, //The nid of the KM being shown.
    'knowledgemap_rep' => $knowledgemap_rep,
  );
  drupal_add_js(
      array('knowledgemap_display' => $settings),
      'setting'
  );
  //Add the KM drawing code.
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap_display') 
          . '/js/knowledgemap_display_common.js', 
      'file'
  );
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap_display') 
          . '/js/knowledgemap_display_edit.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap_display') 
          . '/css/knowledgemap_display_edit.css', 
      'file'
);
  return $element;
}


function knowledgemap_display_cache( $cache_id, $value ) {
  ctools_include('object-cache');
  global $user;
  $cache_id .= $user->uid;
  ctools_object_cache_set('knowledgemap_display', $cache_id, $value);
}


function knowledgemap_display_uncache( $cache_id ) {
  ctools_include('object-cache');
  global $user;
  $cache_id .= $user->uid;
  return ctools_object_cache_get('knowledgemap_display', $cache_id);
}

/**
 * Compute the DOM id for the drawing area.
 * @param integer $id An id of some type.
 * @param integer $delta Delta for multiple field instances.
 * @return string DOM id for the drawing area.
 */
function knowledgemap_display_compute_drawing_id( $id ) {
  return 'km-' . $id . '-drawing';
}

/**
 * Compute the DOM id for the selected item area.
 * @param string $drawing_dom_id DOM id for the drawing area.
 * @return string DOM id for the drawing area.
 */
function knowledgemap_display_compute_item_id( $id ) {
  return 'km-' . $id . '-item';
}

//function knowledgemap_display_field_validate($obj_type, $object, $field,
//$instance, $langcode, &$items,
//&$errors) {
//}

/**
 * Include files ctools needs.
 */
function knowledgemap_display_load_ctools_stuff( $mode ) {
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
  ctools_include('node.pages', 'node', '');
  if ( $mode == 'show' ) {
    ctools_add_css('knowledgemap_display', 'knowledgemap_display_show', 'css');  
  }
  else {
    ctools_add_css('knowledgemap_display', 'knowledgemap_display_edit', 'css');  
  }
}

/**
 * Callback. Called when the user clicks Add button in the client.
 * Shows a node add form in a modal.
 */
function knowledgemap_display_add_item() {
    //Get data sent from client
    //Include ctools files.
    knowledgemap_display_load_ctools_stuff( 'add' );
    //Get the X and Y coords of the click, and the KM that will 
    //own the new item.
    //They are passed in a clumsy way, by creating new DOM elements on the
    //client that have the data as part of their ids. Drupal includes the id
    //when it sends a post to the server.
    $x_len = strlen(LINK_ID_X_COORD);
    $y_len = strlen(LINK_ID_Y_COORD);
    $km_nid_len = strlen(LINK_ID_KM_NID_COORD);
    foreach ( $_REQUEST['ajax_html_ids'] as $id ) {
      if ( !strncmp($id, LINK_ID_X_COORD, $x_len) ) {
        $coord_x = substr($id, $x_len);
      }
      if ( !strncmp($id, LINK_ID_Y_COORD, $y_len) ) {
        $coord_y = substr($id, $y_len);
      }
      if ( !strncmp($id, LINK_ID_KM_NID_COORD, $km_nid_len) ) {
        $km_nid = substr($id, $km_nid_len);
      }
    }
//      if ( !strncmp($id, 'sendback-x-', strlen('sendback-x-')) ) {
//        $coord_x = substr($id, strlen('sendback-x-'));
//      }
    //Make a blank node, to pass to the node add form.
    global $user;
    $node = (object) array(
      'uid' => $user->uid, 
      'name' => (isset($user->name) ? $user->name : ''), 
      'type' => 'knowledge_map_item', 
      'language' => LANGUAGE_NONE
    );
    $node->title = NULL;
    //Prepare the node for editing.
    node_object_prepare($node);
    // Add the node.pages.inc so that functions from the form can be used.
    module_load_include('inc', 'node', 'node.pages');
    // Prepare the form state, ctools reqruies ajax / title.
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add a new item'),
      'km_nid' => $km_nid, 
          //Pass along the nid of the KM node to link to.
          //hook_form_alter uses it.
      'coord_x' => $coord_x,
      'coord_y' => $coord_y,
    );
    //KRM - add this to prevent an error in node_form (or form_node?).
    $form_state['build_info']['args'] = array($node);
    // Do the ctools_modal_form_wrapping of the node form.  Returns a set of
    // ajax commands in output.
    $output = ctools_modal_form_wrapper('knowledge_map_item_node_form', $form_state);
    if (!empty($form_state['executed'])) {
      //The user has saved the form. Execution in complete.
      // Create ajax command array, dismiss the modal window.
      $output = array();
      //Draw the new item.
      $output[] = ajax_command_invoke(
          NULL, 
          'drawItem', 
          array( 
            array(
              'x' => $coord_x, 
              'y' => $coord_y, 
              'title' => $form_state['values']['title'], 
              'item_type' 
                => $form_state['values']['field_item_type'][LANGUAGE_NONE][0]['value'],
            ),
          ) 
      );
      $output[] = ajax_command_invoke(NULL, 'exitAddMode', 
          array( array('s' => 4)));
      //Show the new item as the currently selected one.
      //panels_j2_prepare_view returns an array of commands.
      $temp = knowledgemap_display_prepare_item_display( $form_state['nid'] );
      $output = array_merge($output, $temp );
      //Kill the modal window.
      $output[] = ctools_modal_command_dismiss();
    }
//  return array(
//    '#type' => 'ajax',
//    '#commands' => $output,
//  );
    print ajax_render($output);
    exit;
}


function knowledgemap_display_form_alter(&$form, &$form_state, $form_id) {
  if ( $form_id == 'knowledge_map_item_node_form' ) {
    //The form could be in a modal, in which case the KM node the item
    //should be associated with is known.
    if ( isset($form_state['ajax']) && $form_state['ajax'] ) {
//    drupal_add_js('alert(5);', 'inline' );
      //The form is in a modal. Remove the widget for the relation that 
      //links the item to the knowledge map node. 
      unset( $form['field_knowledge_map'] );
      //Store whether his is an add or edit. Only the add needs
      //special treatment later, to create the relationshoip after the 
      //new nid is known.
      $node = $form_state['node'];
      $is_new_node = (!isset($node->nid) || isset($node->is_new));
      $node->knowledgemap_display_operation 
          = $is_new_node ? 'add' : 'edit';
      //Store the KM nid to link to.
      $node->implied_km = $form_state['km_nid'];
      //Hide the coord fields.
      $form['field_coord_x']['#access'] = FALSE;
      $form['field_coord_y']['#access'] = FALSE;
      //Submit handler.
      $form['#submit'][] = 'knowledgemap_display_submit_item_form';
    }
  }
  
}

function knowledgemap_display_submit_item_form($form, &$form_state) {
  //Copy item coord data into right place for saving.
  //Store the coords, hide their fields.
  $form_state['values']['field_coord_x'][LANGUAGE_NONE][0]['value'] 
      = $form_state['coord_x'];
  $form_state['values']['field_coord_y'][LANGUAGE_NONE][0]['value'] 
      = $form_state['coord_y'];
}

/**
 * Implements hook_node_insert.
 * 
 * Add a new relationship, if this is a new KM item node that was
 * created in a modal from the KM editor thing. Don't have the 
 * nid until this point.
 */
function knowledgemap_display_node_insert($node) {
  //Check whether this is an add operation that needs a relation to be added.
  if (    isset( $node->knowledgemap_display_operation )
       && $node->knowledgemap_display_operation == 'add'
     ) {
    //Add a new relation. Use the implied KM nid stored earlier 
    //in the node object.
    $endpoints = array(
      array('entity_type' => 'node', 'entity_id' => $node->nid),
      array('entity_type' => 'node', 'entity_id' => $node->implied_km),
    );
    relation_create(RELATION_NAME_ITEM_TO_KM, $endpoints);
  }
}

/**
 * Callback - executed when user click on Edit link on node display.
 * It loads the node edit form in a modal.
 * @param integer $nid Node id.
 */
function knowledgemap_display_edit_item( $nid ) {
  //Load ctools files.
  knowledgemap_display_load_ctools_stuff();
  //Load the node.
  $node = node_load($nid);
  //Prepare it for editing.
  node_object_prepare($node);
  // Add the node.pages.inc so that functions from the form can be used.
//  module_load_include('inc', 'node', 'node.pages');
  // Prepare the form state, ctools reqruies ajax / title.  The node edit form
  // requires node.
  $form_state = array(
    'ajax' => TRUE,
    'title' => t('Edit item'),
    'node' => $node,
  );
  //KRM - add this to prevent an error in node_form (or form_node?).
  $form_state['build_info']['args'] = array($node);
  //Tell ctools to do form stuff. Prepare to show it if needed.
  $output = ctools_modal_form_wrapper('knowledge_map_item_node_form', $form_state);
  if ( ! empty($form_state['executed']) ) {
    //The form has been processed and saved by the user. 
    //We are ready to return to the node display state.
    //Prep the node for viewing. Returns an array of commands.
    $output = knowledgemap_display_prepare_item_display($nid);
    //Refresh the list of pages, since the title of the node
    //may have changed.
    $output[] = ajax_command_replace(
        '#node-list-container',
        panels_js2_make_node_list_html()
    );
    //Add a command to hide the modal edit form.
    $output[] = ctools_modal_command_dismiss();
  }
  print ajax_render($output);
  exit;
}



function knowledgemap_display_field_formatter_info() {
  return array(
    'knowledgemap_display_formatter' => array(
      'label' => t('Knowledge map display'),
      'field types' => array('knowledgemap_display'),
    )
  );
}

function knowledgemap_display_field_formatter_view($entity_type, $entity, 
    $field, $instance, $langcode, $items, $display) {
  $element = array();
  drupal_add_js('misc/ajax.js');
  //Could be multiple items. Probably not, though.
  foreach ($items as $delta => $item) {
    //What is the DOM id of the drawing area?
    $drawing_dom_id = $entity_type . '-' . $entity->nid . '-' . $delta;
    //Make a <div> for the drawing.
    $element[$delta] = array(
      '#type' => 'markup',
      '#markup' => 
        '<div id="' . $drawing_dom_id . '" class="km-drawing"><div>',
    );
    //Send the DOM id to the JS.
    drupal_add_js(
        array('knowledgemap_display' => 
          array('drawing_dom_id' => $drawing_dom_id)
        ),
        'setting'
    );
    //Fetch data about all items in this KM and JSON it.
    drupal_add_js(
        array(
          'knowledgemap_display' =>
            array( 
              'knowledgemap_rep' => 
                knowledgemap_display_make_km_rep($entity->nid)
            )
        ),
        'setting'
    );
    //Add the KM drawing code.
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap_display') 
          . '/js/knowledgemap_display_common.js', 
      'file'
  );
    drupal_add_js(
        drupal_get_path('module', 'knowledgemap_display') 
            . '/js/knowledgemap_display_show.js', 
        'file'
    );
  } //End for each item.
  return $element;
}

// Code for a refresh link
//    $refresh_link =  array(
//      '#tag' => 'div',
//      '#value' => l(
//        t('Refesh'), 
//        'knowledgemap_display_update_drawing_callback/' 
//            . $drawing_id, // . '/', 
//        array('attributes' => 
//          array(
//            'class' => array('use-ajax'),
//          )
//        )
//      ),
//    );
//            array(
//          '#href' => 'knowledgemap_display_update_drawing',
//          '#title' => 'Refresh',
//          '#attributes' => array(
//            'class' => 'use-ajax',
//          ),
//        );
//        $refresh_button_rendered = theme(
//          'html_tag',
//          array( 'element' => $refresh_link )
//        );
//        $output = $drawing_field_rendered . $refresh_button_rendered;


/**
 * 
 * @param type $km_nid Id of the entity containing this KM field.
 * @return array Representation of the KM.
 */
function knowledgemap_display_make_km_rep($km_nid) {
  $items = array();
  //What items are linked to this KM node?
  $query = relation_query('node', $km_nid);
  $query_result = $query->execute();
  $relations = entity_load('relation', 
      array_keys($query_result)
  );
  if ( sizeof($relations) > 0) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'knowledge_map_item')
      ->fieldCondition('field_knowledge_map', 'target_id', 
          $km_nid, '=')
      ->propertyCondition('status', 1);
    $node_records = $query->execute();
    $nids = array_keys($node_records['node']);
    $nodes = node_load_multiple($nids);
    foreach($nodes as $node) {
      $connected_to = array();
      foreach ( $node->field_connected_to[LANGUAGE_NONE] as $connection) {
        $to_nid_string = $connection['endpoints'][ min( array_keys($connection['endpoints']) )];
        $to_nid_array = explode(':', $to_nid_string);
        $to_nid = $to_nid_array[1];
        $relation_id = $connection['relation_id'];
        $relation = relation_load($relation_id);
        $connected_to[] = array(
          'nid' => $to_nid,
          'required' => $relation->field_required[LANGUAGE_NONE][0]['value'],
        );
      }
      $items[] = array(
        'nid' => $node->nid,
        'title' => $node->title,
        'item_type' => $node->field_item_type[LANGUAGE_NONE][0]['value'],
        'x_coord' =>
            isset( $node->field_x_coord[LANGUAGE_NONE][0]['value'] ) 
               ? $node->field_x_coord[LANGUAGE_NONE][0]['value']
               : 'none',
        'y_coord' => 
            isset( $node->field_y_coord[LANGUAGE_NONE][0]['value'] ) 
               ? $node->field_y_coord[LANGUAGE_NONE][0]['value']
               : 'none',
        'connected_to' => $connected_to,
      );
    } //end for
  } //End if there are relations.
  return $items;
}


//function knowledgemap_display_update_drawing( $drawing_id ) {
//  $commands = array();
//  $commands[] = ajax_command_alert('Refresh clicked: ' . $drawing_id );
//  print ajax_render($commands);
//  exit;
//}

/**
 * Return the HTML for an MT display. Includes DOM elements used
 * by JS.
 * @return string The HTML.
 */
/*
function knowledgemap_display_init_html() {
  return '
    <svg class="knowledgemap-display">
      <defs>
        <filter id="f1" x="0" y="0">
          <feGaussianBlur in="SourceGraphic" stdDeviation="1" />
        </filter>
        <filter x="0" y="0" width="1" height="1" id="solidbackground">
          <feFlood flood-color="#CCCCCC"/>
          <feComposite in="SourceGraphic"/>
        </filter>
        <linearGradient id="textgradient" x1="0%" x2="0%" y1="0%" y2="100%">  
            <stop stop-color="#999" offset="0%"/>  
            <stop stop-color="#111" offset="100%"/>  
        </linearGradient>
      </defs>   
      <g id="line-set-marker"/>
    </svg>  ';
}
 * 
 */