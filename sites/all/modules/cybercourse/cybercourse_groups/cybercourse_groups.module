<?php

/*
 * Defines some basic CyCo stuff.
 */

/**
 * Implements hook_menu.
 */
//function cybercourse_groups_menu() {
//  $items = array();
//  $items['admin/config/cybercourse'] = array(
//    'title' => 'Cybercourse',
//    'description' => 'Configuration of the Cybercourse system.',
//    'page callback' => 'system_admin_menu_block_page',
//    'access arguments' => array('administer site configuration'),
//    'file' => 'system.admin.inc',
//    'file path' => drupal_get_path('module', 'system'),
//  );
//  $items['admin/config/cybercourse/base'] = array(
//    'title' => 'Cybercourse base settings',
//    'description' => 'Base configuration of the Cybercourse system.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('cybercourse_base_settings_form'),
//    'access arguments' => array('administer site configuration'),
////    'type' => MENU_DEFAULT_LOCAL_TASK,
//  );
//  return $items;
//}

function cybercourse_groups_render_basic_list() {
//  $html = views_embed_view('cybercourse_user_groups', 'user_groups_for_cp');
  $name = 'cybercourse_user_groups';
  $display_id = 'user_groups_for_cp';  
  $view = views_get_view($name);
  if (!$view || !$view->access($display_id)) {
    return '<p>Not found or access denied</p>';
  }
  $view_content = $view->preview($display_id);
  return $view_content;
}

/**
 * Get the groups of a given type that a user has a given role in.
 * @global stdClass $user The current user.
 * @param string $group_type Type of group, e.g., class.
 * @param string $role_name Role name, e.g., grader.
 * @param stdClass $user_to_check User to check. Defaults to current user.
 * @return array Group ids.
 */
function cybercourse_groups_get_groups_by_role( 
    $group_type, $role_name, $user_to_check = NULL ) {
  if ( is_null($user_to_check) ) {
    global $user;
    $user_to_check = $user;
  }
  //Find groups the user is in.
  $user_group_gids = og_get_groups_by_user($user_to_check, $group_type);
  $user_groups = array();
  foreach ( $user_group_gids as $gid ) {
    $roles = og_get_user_roles($group_type, $gid);
    if ( in_array($role_name, $roles) ) {
      $user_groups[] = $gid;
    }
  }
  return $user_groups;
}


/**
 * Get all users of a group.
 * See http://codekarate.com/blog/drupal-7-getting-all-members-organic-group
 */
function cybercourse_groups_get_group_users($gid) {
  $query = db_select('users', 'u');
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  return $query->execute();
}



