<?php

/*
 * Implements hook_init.
 * 
 * Insert JS files to make a popup.
 */

function cybercourse_exercise_init() {
//  global $base_url;
//  drupal_add_js(
//      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
//      . '/js/popup/jquery.popupwindow.js'
//  );
//  drupal_add_js(
//      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
//      . '/js/cybercourse_exercise.js'
//  );
//  drupal_add_css(
//      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise') 
//        . '/css/cybercourse_exercise.css'
//  );
}

/**
 * Implements hook_menu.
 */
function cybercourse_exercise_menu() {
  $items = array();
  //A page that just closes the window it is in.
  $items['cybercourse-exercise-close-popup'] = array(
    'title' => 'Done',
    'page callback' => '_cybercourse_exercise_close_popup',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/cybercourse/exercise'] = array(
    'title' => 'Exercise settings',
    'description' => 'Configuration of the Cybercourse exercise module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cybercourse_exercise_settings_form'),
    'access arguments' => array('admininster site configuration'),
    'file' => 'cybercourse_exercise.admin.inc',
    'file path' => drupal_get_path('module', 'cybercourse_exercise'),
    );
  return $items;
}

function cybercourse_exercise_permission() {
  return array(
    'administer exercise settings' => array(
      'title' => t('Administer exercise settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Called in hook_menu, to close current browser window (a popup).
 */
function _cybercourse_exercise_close_popup() {
  global $base_url;
  $path = $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
      . '/js/close_popup.js';
  drupal_add_js($path);
  return '<h1>Done</h1>'; //Need to return something here.
}

/**
 * Implementation of hook_filter_info().
 */
//function cybercourse_exercise_filter_info() {
//  //Define a filter that can replace a reference to an exercise in page with the
//  //exercise content.
//  $filters['cybercourse_exercise_insert'] = array(
//    'title' => t('Insert CyberCourse exercise'),
//    'description' => t('[[[cycoexercise (node_id)]]], to insert the exercise with given NID'),
//    'process callback' => 'cybercourse_exercise_filter_node_insert_process',
//    'tips callback'  => 'cybercourse_exercise_filter_node_embed_tips',
//    'cache' => FALSE,
//  );
//  return $filters;
//}

/**
 * Process callback for hook_filter. Finds [[[cycoexercise (node_id)]]]
 * and passes match data onto function that will do the insertion.
 */

/**
 * Implements hook_swim_betwixt_markup_2_html_alter().
 * 
 * Translate exercise CyCo markup in $content to its 
 * viewHTML equivalent. 
 * 
 * [[[cycoexercise 123]]]
 * 
 * See SWIM docs for more.
 */
function cybercourse_exercise_swim_betwixt_markup_2_html_alter(&$content) {
  $regex = '/\[\[\[\s*cycoexercise\s*(\d+)\s*\]\]\]/';
  //[[[, optional whitespace, cycoexercise, optional whitespace, 
  //exercise number, optional whitespace, ]]]
  $content = preg_replace_callback($regex, '_cybercourse_exercise_make_replacements', $content);

//  return preg_replace_callback('/\[\[\[\s*cycoexercise\s*(\d+)\s*\]\]\]/',
//      //[[[, optional whitespace, cycoexercise, optional whitespace, 
//      //exercise number, optional whitespace, ]]]
//      '_cybercourse_exercise_make_replacements', $content);
}

/**
 * Process callback for hook_filter. Finds [[[cycoexercise (node_id)]]]
 * and passes match data onto function that will do the insertion.
 */
//function cybercourse_exercise_filter_node_insert_process(
//    $text, $filter, $format, $langcode, $cache, $cache_id) {
//  return preg_replace_callback('/\[\[\[\s*cycoexercise\s*(\d+)\s*\]\]\]/',
//      //[[[, optional whitespace, cycoexercise, optional whitespace, 
//      //exercise number, optional whitespace, ]]]
//      '_cybercourse_exercise_make_replacements', $text);
//}

/**
 * Tips callback for hook_filter
 */
//function cybercourse_exercise_filter_node_embed_tips($filter, $format, $long) {
//  return t('[[[cycoexercise 123]]] - Insert an exercise.');
//}

/**
 * Generates the HTML for the exercise.
 */
function _cybercourse_exercise_make_replacements($matches) {
  global $base_url;
  $exercise_nid = $matches[1];
  $exercise_node = node_load($exercise_nid);
  //Make sure that this is the right type of node.
  if ($exercise_node == FALSE || !node_access('view', $exercise_node) || !$exercise_node->status || $exercise_node->type != 'exercise') {
    $message = t('Invalid exercise id: @id', array('@id' => $exercise_nid));
    drupal_set_message($message);
    watchdog('cybercourse_exercise', $message);
    return '<p>' . $message . '</p>';
  }
  else {
    //Make the submission links.
    $labeled_links = _cybercourse_exercise_make_submit_links($exercise_node);
    $body_content = swim_rest2html(
        $exercise_node->field_body[LANGUAGE_NONE][0]['pure_rest']
    );
    $result = theme('cyco_embedded_exercise', array(
      'exercise_nid' => $exercise_nid,
      'title' => $exercise_node->title,
      'body' => $body_content,
      'labeled_links' => $labeled_links,
    ));
    return $result;
  }
}

/**
 * Make links for exercise solution submission.
 * @param type $exercise_node The nid of the exercise.
 * @return array Labelled link data.
 */
function _cybercourse_exercise_make_submit_links( $exercise_node ) {
  //If there is no submission, there is only a link to create a new one.
  //If there is an existing submission:
  //  If there is no feedback yet, there is only an edit link.
  //  If there is feedback, there is a Review link, and a new version link.
  global $user;
  global $base_url;
  //Create submission links for this exercise.
  drupal_add_js(
      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
      . '/js/cybercourse_exercise_submission_links.js'
  );
//  drupal_add_js(
//      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
//      . '/js/cybercourse_exercise_open_links_in_popup.js'
//  );  
  //Send current user uid to client.
  drupal_add_js(
      array('cybercourse_exercise' => 
        array(
          'uid' => $user->uid,
        ),
      ),
      'setting'
  );
  return;
//  
//  $labeled_links = array();
//  $exercise_nid = $exercise_node->nid;
//  $query = new EntityFieldQuery();
//  $query->entityCondition('entity_type', 'node')
//      ->entityCondition('bundle', 'exercise_submission')
//      ->propertyCondition('status', 1)
//      ->fieldCondition('field_exercise', 'target_id', $exercise_nid, '=')
//      ->propertyCondition('uid', $user->uid)
//      ->propertyOrderBy('created');
//  $result = $query->execute();
//  if ( ! isset($result['node']) ) {
//    //No submission yet. Show an add link.
//    $link = _cybercourse_exercise_make_submission_link(
//        'add',
//        'Work on it',
//        'Work on the exercise',
//        $exercise_nid
//    );
//    $labeled_links[] = array(
//      'version_label' => '',
//      'status_message' => '',
//      'link' => $link,
//    );
//    return $labeled_links;
//  }
//  else {
//    //There is at least one submission for this exercise for this user.
//    $submissions_nids = array_keys($result['node']);
//    //Run through the submissions. They are in order by creation date.
//    //Create triple: version number, version status, link.
//    $number_submissions = sizeof($submissions_nids);
//    $html = '';
//    foreach ( $submissions_nids as $submissions_nid ) {
//      $submission = node_load( $submissions_nid );
//      if ( ! $submission ) {
//        $message = __FUNCTION__ . ': bad nid? ' . $submissions_nid;
//        throw new Exception( $message );
//      }
//      //Set up the version label. Only exists if there is more than one version.
//      $version_message = '';
//      if ( $number_submissions > 1 ) {
//        if ( !isset( $submission->field_version[LANGUAGE_NONE][0]['value'] ) ) {
//          $message = __FUNCTION__ . ': missing version number.';
//          throw new Exception( $message );
//        }
//        $version = $submission->field_version[LANGUAGE_NONE][0]['value'];
//        $version_message = 'Version ' . $version;
//      }
//      //Set up the status label and the link.
//      $status_message = '';
//      $link = '';
//      if ( ! isset( $submission->field_when_submitted[LANGUAGE_NONE][0]['value'] ) ) {
//        $status_message = 'Not submitted for grading.';
//        $link = _cybercourse_exercise_make_submission_link(
//          'edit',
//          'Work on it',
//          'Work on the exercise',
//          $submissions_nid
//        );
//      }
//      else {
//        //It has been submitted.
//        //Has there been feedback?
//        if ( ! isset( $submission->field_when_feedback_given[LANGUAGE_NONE][0]['value'] ) ) {
//          //Submitted, but no feedback. User can still work on it.
//          $status_message = 'Submitted for grading, but no feedback yet.';
//          $link = _cybercourse_exercise_make_submission_link(
//            'edit',
//            'Work on it',
//            'Work on the exercise',
//            $submissions_nid
//          );
//        }
//        else {
//          //Submitted and there is feedback. Can only review it.
//          $status_message = 'Feedback is available.';
//          $link = _cybercourse_exercise_make_submission_link(
//            'review',
//            'Review',
//            'Look at the feedback',
//            $submissions_nid
//          );
//        }
//      }
//      $labeled_links[] = array(
//        'version_label' => $version_message,
//        'status_message' => $status_message,
//        'link' => $link,
//      );
//    } // end foreach submission.
//    return $labeled_links;
//  }
//  
}

/**
 * Create a link for adding, editing, or reviewing a submission, 
 * in a popup window.
 * @param string $operation Operation the link performs: add, edit, review.
 * @param string $link_text Text to click on.
 * @param string $link_title Text for the title attribute.
 * @param integer $exercise_nid Exercise node id.
 * @param string $urlExtras Extra stuff to append to the to the link URL, 
 *  e.g., submission version number.
 * @return string Link, rendered.
 */
function _cybercourse_exercise_make_submission_link( 
    $operation, $link_text, $title_text, $exercise_nid, $urlExtras = ''
  ) {
  global $base_url;
  $url = $base_url;
  if ( $operation == 'add' ) {
    $url .= '/node/add/exercise-submission';
  }
  else if ( $operation == 'edit' || $operation == 'review' ) {
    $url .= '/node/' . $exercise_nid . '/edit';
  }
  else {
    throw new Exception(
      '_cybercourse_exercise_make_submission_link: bad operation: ' . $operation
    );
  }
  //Add the operation type.
  $url .= '?op=' . $operation;
  //Add exercise id.
  $url .= '&field_exercise=' . $exercise_nid;
  //Add destination after submission that will close the window.
  $url .= '&destination=cybercourse-exercise-close-popup';
  //Add extras.
  $url .= $urlExtras;
  $link = l( t($link_text), $url, array('attributes' =>
    array(
      'title' => t( $title_text ),
      'class' => array('exercise-work-on-it-link'),
      'data-target' => 'popup',
    )
  ));
  return $link;
}

/**
 * Implement hook_theme().
 */
function cybercourse_exercise_theme() {
  $result = array(
    'cyco_embedded_exercise' => array(
      'template' => 'templates/cybercourse-inserted-exercise',
      //Default variable values
      'variables' => array(
        'title' => '(no title)',
        'body' => '(MT)',
        'labeled_links' => array(),
      ),
    ),
  );
  return $result;
}

/**
 * Return the theme to use for popup windows, by inspecting the 
 * destination.
 */
function cybercourse_exercise_custom_theme() {
//  if (( isset($_GET['destination']) 
//      && $_GET['destination'] == 'cybercourse-exercise-close-popup' ) ||
//      current_path() == 'cybercourse-exercise-close-popup'
//  ) {
  if (_cybercourse_exercise_is_submission_page_in_popup() ) {
    return _cybercourse_exercise_get_submission_theme();
  }
}


/**
 * Return true if the current page is an exercise submission shown in a popup.
 */
function _cybercourse_exercise_is_submission_page_in_popup() {
  $is_submission_popup = FALSE;
  //Is the page in a popup?
  if ((    isset($_GET['destination']) 
        && $_GET['destination'] == 'cybercourse-exercise-close-popup' ) ) {
    //Is this a submission add form?
    $current_path = current_path();
    if ( $current_path == 'node/add/exercise-submission' ) {
      //It's an add form.
      $is_submission_popup = TRUE;
    }
    else if (preg_match('/node\/(\d+)\/edit/', $current_path, $matches) ) {
      //Is this an edit form?
      $nid = $matches[1];
      $node = node_load($nid);
      $is_submission_popup = ( $node->type == 'exercise_submission' );
    }
  }
  return $is_submission_popup;
}

/**
 * Get the machine name of the theme to use for the exercise submission form.
 * @global string $theme Machine name of current default theme.
 * @return string Machine theme name.
 */
function _cybercourse_exercise_get_submission_theme() {
  $theme_to_use = variable_get('cybercourse_exercise_submission_theme', 'default');
  if ( $theme_to_use == 'default' ) {
    //Grab the current default theme.
    global $theme;
    $theme_to_use = $theme;
  }
  return $theme_to_use;
}

/**
 * When inserting an exercise into a page, use a special template that
 * strips most of the content away.
 * @param string $vars
 */
//function cybercourse_exercise_preprocess_node(&$vars) {
//  if ($vars['node']->type == 'exercise' && $vars['view_mode'] == 'cybercourse_exercise_insert') {
//    $vars['theme_hook_suggestions'][] = 'node__exercise__cybercourse_exercise_insert';
//  }
//}

/**
 * Implements hook_node_view().
 * 
 * If the user can edit course pages, then add the id of the exercise
 * to the end of the title. Helps when inserting exercise 
 * references in a course page.
 */
function cybercourse_exercise_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'exercise' && $view_mode == 'full') {
    if (user_access('edit any course_page')) {
      drupal_set_title($node->title . ' (' . $node->nid . ')');
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 * 
 * Define a view mode for inserting exercises in regular content.
 */
//function cybercourse_exercise_entity_info_alter(&$entity_info) {
////  $entity_info['node']['view modes']['cybercourse_exercise_insert'] = array(
////    'label' => t('Insert Cybercourse exercise'),
////    'custom settings' => TRUE,
////  );
//  $entity_info['node']['view modes']['cyco_exer'] = array(
//    'label' => t('Insert Cybercourse exercise into node'),
//    'custom settings' => TRUE,
//  );  
//}

//function cybercourse_exercise_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
//  if (isset($form['field_rubric_items'][LANGUAGE_NONE][0]['field_rubric_item']
//          ['edit_entityconnect__field_rubric_item_all_field_rubric_items-und-0'])) {
//    $form['field_rubric_items'][LANGUAGE_NONE][0]['field_rubric_item']
//        ['edit_entityconnect__field_rubric_item_all_field_rubric_items-und-0']
//        ['#weight'] = 4;
//    $form['field_rubric_items'][LANGUAGE_NONE][0]['field_rubric_item']
//        ['edit_entityconnect__field_rubric_item_all_field_rubric_items-und-0']
//        ['#value'] = 'Edit this item';
//    $form['field_rubric_items'][LANGUAGE_NONE][0]['field_rubric_item']
//        ['add_entityconnect__field_rubric_item_all_field_rubric_items-und-0']
//        ['#weight'] = 8;
//    $form['field_rubric_items'][LANGUAGE_NONE][0]['field_rubric_item']
//        ['add_entityconnect__field_rubric_item_all_field_rubric_items-und-0']
//        ['#value'] = 'Add a new rubric item';
//  }
//}

/**
 * Implements hook_form_alter().
 * 
 * Hide the rubric items field, and add the replacement UI.
 * @param type $form
 * @param type $form_state
 */
function cybercourse_exercise_form_exercise_node_form_alter(&$form, $form_state) {
  $form['#submit'][] = '_cybercourse_exercise_form_submit';
  //Hide the standard field for rubric item creation.
  $form['field_rubric_items']['#type'] = 'hidden';
  //Pass nids of current rubric items to client in a hidden form field.
  $rubric_items = array();
  if (isset($form_state['node']->field_rubric_items[LANGUAGE_NONE])) {
    foreach ($form_state['node']->field_rubric_items[LANGUAGE_NONE] as $key => $value) {
      $rubric_items[] = intval($value['target_id']);
    }
  }
  $form['cyco_current_items'] = array(
    '#type' => 'hidden',
    '#value' => json_encode($rubric_items),
  );
  //Load the client UI stuff.
  drupal_add_library('system', 'ui.dialog');
  //Load Fancytree.
  $ftLibraryInfo = libraries_load('fancytree');
  $numFilesLoaded = libraries_load_files($ftLibraryInfo);
  if ($numFilesLoaded <= 0) {
    $mess = t('Error: no Fancytree files loaded. Is Fancytree installed?');
    watchdog('cybercourse_exercise', $mess);
    services_error($mess, 666);
  }
  //Add JS and CSS for the UI.
  drupal_add_js(
      drupal_get_path('module', 'cybercourse_exercise')
      . '/js/cybercourse_exercise_select_rubrics_ui.js'
  );
  drupal_add_css(
      drupal_get_path('module', 'cybercourse_exercise')
      . '/css/cybercourse_exercise_select_rubrics_ui.css'
  );
  drupal_add_js(
      drupal_get_path('module', 'cybercourse_exercise')
      . '/js/cybercourse_exercise_create_rubric_ui.js'
  );
  drupal_add_css(
      drupal_get_path('module', 'cybercourse_exercise')
      . '/css/cybercourse_exercise_create_rubric_ui.css'
  );
  //Grab HTML for UI from a template.
  $ui_html = theme('select_rubric_item');
  $form['ui_html'] = array(
    '#type' => 'markup',
    '#markup' => $ui_html,
    '#weight' => $form['field_rubric_items']['#weight'],
  );
}

function _cybercourse_exercise_form_submit($form, &$form_state) {
//  $form_state['values']['field_rubric_items'][LANGUAGE_NONE][0]['target_id'] = $nid;
//  $form_state['values']['field_rubric_items'][LANGUAGE_NONE][1]['target_id'] = $nid;
  $linked_items = $_POST['cyco_current_items'];
  $linked_items = json_decode($linked_items);
  $form_state['values']['field_rubric_items'][LANGUAGE_NONE] = array();
  foreach ($linked_items as $key => $nid) {
    $form_state['values']['field_rubric_items'][LANGUAGE_NONE][$key]['target_id'] = $nid;
  }
}

/**
 * Implements hook_libraries_info().
 * 
 * Define Fancytree in the libraries.
 */
function cybercourse_exercise_libraries_info() {
  $libraries = array();
  $libraries['fancytree'] = array(
    'name' => 'Fancytree',
    'vendor url' => 'https://github.com/mar10/fancytree',
    'download url' => 'https://github.com/mar10/fancytree',
    'path' => 'dist',
    'version arguments' => array(
      'file' => 'package.json',
      // "version": "2.0.0-10"
      'pattern' => '/\"version\"\:\s*\"(.*)\"/',
//      // version:"4.3"
//      'pattern' => '/version\:\"(\d+\.+\d+)\"/',
      'lines' => 10,
    ),
    'files' => array(
      'js' => array(
        'jquery.fancytree-all.js',
      ),
      'css' => array(
        'skin-win8/ui.fancytree.min.css',
      )
    ),
  );
  return $libraries;
}

/**
 * Implement hook_theme().
 * @return array
 */
//function cybercourse_exercise_theme() {
//  $result = array(
//    //HTML for rubric selection UI.
//    'select_rubric_item' => array(
//      'template' => 'templates/cybercourse-exercise-select-rubric-item',
//    ),
//  );
//  return $result;
//}

/**
 * Implements hook_form_alter() for exercise submission form.
 * 
 * If form is opened from "Work on it" link, add some stuff.
 */
function cybercourse_exercise_form_exercise_submission_node_form_alter(&$form, $form_state) {
  global $base_url;
  drupal_add_js(
      $base_url . '/' . drupal_get_path('module', 'cybercourse_exercise')
      . '/js/cybercourse_exercise_prep_submission_form.js'
  );
  //Send settings to SWIM JS. Size the editor.
  $settings = array(
    'heightFraction' => 0.5,
  );
  drupal_add_js(
      array('swim' => $settings),
      'setting'
  );
  //Unless the user has special privilages, hide lots o' fields.
//  $privilaged = cybercourse_base_current_user_has_role( 
//      array('administrator', 'instructor', 'grader')
//  );
  //Get values from the URL.
  $operation = NULL;
  if ( isset( $_GET['op'] ) ) {
    $operation = $_GET['op'];
  }
  //If there is no op, this is a normal edit, not through a popup. 
  //Don't need to do any of the other processing here.
  if (is_null($operation) ) {
    return;
  }
  $exercise_id = NULL;
  if ( isset( $_GET['field_exercise'] ) ) {
    $exercise_id = $_GET['field_exercise'];
  }
  //Version defaults to 1.
  $version = 1;
  if ( isset( $_GET['version'] ) ) {
    $version = $_GET['version'];
    if ( is_nan($version) || $version < 1 ) {
      $message = __FUNCTION__ . ': bad version: ' . $version;
      throw new Exception( $message );
    }
  }
  if ( $operation == 'add' ) {
    //Adding a new submission.
    if ( $privilaged ) {
      //Set the value of the version.
      $form['field_version']['#default_value'] = $version;
    }
    else {
      //Hide the exercise select.
      if (is_null($exercise_id) ) {
        $message = __FUNCTION__ . ': exercise id not passed.';
        throw new Exception( $message );
      }
      unset( $form['field_exercise'] );
      //Pass the exercise nid.
      $form['field_exercise_hidden'] = array(
        '#type' => 'value',
        '#value' => $exercise_id,
      );
      //Send it to JS as well.
      drupal_add_js(
          array('cybercourse_exercise' => 
            array(
              'exerciseNid' => $exercise_id,
            ),
          ),
          'setting'
      );
      //Replace the version text field with a value field.
      unset ($form['field_version']);
      $form['field_version_hidden'] = array(
        '#type' => 'value',
        '#value' => $version,        
      );
      //Kill the when submitted field.
      unset( $form['field_when_submitted'] );
      //Kill the when feedback form.
      unset( $form['field_when_feedback_given'] );
      //Kill the feedback source field.
      unset( $form['field_feedback_source'] );
      //Kill the feedback field.
      unset( $form['field_feedback'] );
      //Kill the conversation field.
      unset( $form['field_conversation'] );
      //Kill the rubric item ratings field.
      unset( $form['field_rubric_item_ratings'] );
      //Kill the complete field.
      unset( $form['field_complete'] );
      //Kill preview.
      if ( isset( $form['actions']['preview'] ) ) {
        unset( $form['actions']['preview'] );
      }
      unset( $form['additional_settings'] );
    }
  }
  //Set the page title.
  $exercise_node = node_load( $exercise_id );
  drupal_set_title( 'Solution for exercise: ' . $exercise_node->title );
  //Add submission processor.
  $form['#submit'][] = '_cybercourse_exercise_submission_form_submission';
  
  //Check whether this is a new-window submission.
  if (_cybercourse_exercise_is_submission_page_in_popup() ) {
    //Aye.
    module_invoke('admin_menu', 'suppress');
  }
}

function _cybercourse_exercise_submission_form_submission($form, &$form_state) {
  $r=5;
  $exercise_nid = $form_state['values']['field_exercise_hidden'];
  $version = $form_state['values']['field_version_hidden'];
  $form_state['values']['field_exercise'][LANGUAGE_NONE][0]['target_id'] = $exercise_nid;
  $form_state['values']['field_version'][LANGUAGE_NONE][0]['value'] = $version;
}