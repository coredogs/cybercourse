<?php
/**
 * @todo Create SWIM text format at install.
 */

//URL (from root) of a page on how to fix errors repotredf by docutils (ReST).
define( 'SWIM_FORMAT_ERROR_HELP_URL', 'swim-format-error-help' );

/**
 * Implements hook_help().
 */
function swim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#swim':
      if ( ! user_access('peek content') ) {
        return '<p>' . t('Access denied.') . '</p>';
      }
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function swim_menu() {
  $items = array();
  //Return a page with no content, but all the stylesheets and other 
  //themeing stuff in place. Used for previews.
  $items['swim-mt-peek'] = array(
    'page callback' => 'swim_mt_peek',
    'access callback' => '_swim_check_peek_perm',
    'type' => MENU_CALLBACK,
  );
  //Return rendered content to show in peek dialog.
  $items['swim-peek'] = array(
    'page callback' => 'swim_peek',
    'access callback' => '_swim_check_peek_perm',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function _swim_check_peek_perm() {
  if ( user_access( 'peek content' ) ) {
    return TRUE;
  }
  //Check if other modules want to grant access.
  $results = module_invoke_all('swim_peek_access');
  $access_granted = FALSE;
  foreach( $results as $result ) {
    if ( $result ) {
      $access_granted = TRUE;
      break;
    }
  }
  return $access_granted;
}

/**
 * Implementation of hook_perm().
 */
function swim_permission() {
  return array(
    'switch to plain' => array(
      'title' => t('Can switch to plain text'),
      'description' => t('When editing, seee a "Switch to plain text editor" link.')
    ),
    'peek content' => array(
      'title' => t('Peek at rendered content'),
      'description' => t('When editing, see what the content looks like on various devices.')
    ),
    'access ckHtml field' => array(
      'title' => t('Access hidden CKEditor HTML field.'),
      'description' => t(
          'In case body field gets out of sync with HTML used in CKEditor. '
        . 'Should not be needed.'    
      )
    ),
  );
}

/**
 * Implements hook_ckeditor_plugin(). 
 * 
 * Tell Drupal's CK module where the peek plugin is.
 */
function swim_ckeditor_plugin() {
  global $base_url;
  if ( user_access('peek content') ) {
    return array(
      'peek' => array(
        // Plugin name.
        'name' => 'peek',
        // Plugin description - it will be displayed in the plugins management section of the profile settings.
        'desc' => t('SWIM: Plugin to preview content on various devices.'),
        // The full path to the CKEditor plugin directory, trailing slash included.
        'path' => drupal_get_path('module', 'swim') . '/plugin/',
      )
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function swim_form_alter(&$form, &$form_state, $form_id) {
  try {
    global $base_url;
    if ( stristr($form_id, 'node_form') !== FALSE ) {
      //Is the SWIM format being used?
      $body_format_name = $form['body'][LANGUAGE_NONE][0]['#format'];
      if ( is_null($body_format_name) || $body_format_name == '' ) {
        //If no format, get the name of the default format.
        $body_format_name = filter_default_format();
      }
      $new_node = ! isset( $form['#entity']->nid );
      if ( $body_format_name == 'swim' || $new_node ) {
        //If field_body_ck is null, put something in it.
        //  This happens on existing nodes when body CK was just defined.
        //  It should not happen, other than during development.
        if ( ! isset( $form['#node']->field_body_ck[LANGUAGE_NONE][0]['value'] ) ) {
          $form['#node']->field_body_ck[LANGUAGE_NONE][0]['value'] = '';
          $form['#node']->field_body_ck[LANGUAGE_NONE][0]['summary'] = '';
        }
        //Copy content from field_body_ck to body. 
        //See SWIM docs for details.
        if ( ! $new_node ) {
          $form['body'][LANGUAGE_NONE][0]['#default_value'] 
              = $form['#node']->field_body_ck[LANGUAGE_NONE][0]['value'];
          if ( isset( $form['#node']->field_body_ck[LANGUAGE_NONE][0]['summary'] ) ) {
            $form['body'][LANGUAGE_NONE][0]['summary']['#default_value']
                = $form['#node']->field_body_ck[LANGUAGE_NONE][0]['summary'];
          }
        }
        //Access to field_body_ck.
        $form['field_body_ck']['#access'] = user_access( 'access ckHtml field' );
        //Set up call to submit function.
        $form['#submit'][] = '_swim_form_submit';
        //Set up UI stuff.
        drupal_add_library('system', 'ui.dialog');
        //Load JS for doing peeks.
        drupal_add_js( drupal_get_path('module', 'swim') .'/js/swim.js' );
        drupal_add_css(drupal_get_path('module', 'swim') . '/css/swim.css' );
        //Load JS to remove 'Switch to plain text' link, depending on permissions.
        //Load late, so the link to hide has been built.
        if ( ! user_access('switch to plain') ) {
          drupal_add_js(
              drupal_get_path('module', 'swim') . '/js/swim_kill_plain_switch.js',
            array(
              'group' => JS_THEME,
              'weight' => 20,
            )
          );
        } //end ! user_access('switch to plain')
        //Send some settings to JS.
        global $base_url;
        $settings = array(
          'base_url' => $base_url,
          'format_name' => 'swim',
          'can_peek' => user_access('peek content') ? 'yes' : 'no',
          'editing_stylesheet' => 
            $base_url . '/' . drupal_get_path('module', 'swim') . '/css/swim_editing.css',
          'icon_path' =>
            $base_url . '/' . drupal_get_path('module', 'swim') . '/plugin/icons/',
        );
        drupal_add_js(
            array('swim' => $settings),
            'setting'
        );
        //This is how one calls JS code to run once Submit button is clicked.
        //$form['#attributes'] = array('OnSubmit' => 'alert("Thing");');
      } //Using SWIM text format.
    } //This is a node form.
  }
 catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    watchdog('SWIM', $e->getMessage());   
 }
}

/**
 * Called when a form is submitted. Prep content for DB.
 */
function _swim_form_submit($form, &$form_state) {
  //See SWIM docs for details.
  $body_value = $form_state['values']['body'][LANGUAGE_NONE][0]['value'];
  $body_summary = '';
  if ( isset( $form_state['values']['body'][LANGUAGE_NONE][0]['summary'] ) ) {
    $body_summary = $form_state['values']['body'][LANGUAGE_NONE][0]['summary'];
  }
  //Copy content from body to field_body_ck. 
  $form_state['values']['field_body_ck'][LANGUAGE_NONE][0]['value']
    = $body_value;
  if ( isset( $form_state['values']['field_body_ck'][LANGUAGE_NONE][0]['summary'] ) ) {
    $form_state['values']['field_body_ck'][LANGUAGE_NONE][0]['summary']
      = $body_summary;
  }
  //Convert to pure ReST.
  _swim_ckhtml2rest($body_value);
  if ( $body_summary ) {
    _swim_ckhtml2rest($body_summary);
  }  
  //First, the <br>s.
//  swim_remove_brs( $body_value );
//  if ( $body_summary ) {
//    swim_remove_brs( $body_summary );
//  }
//  //Replace &nbsp; with real spaces.
//  $body_value = str_replace('&nbsp;', ' ', $body_value);
//  if ( $body_summary ) {
//    $body_summary = str_replace('&nbsp;', ' ', $body_summary);
//  }
//  //Replace &#39; with real quotes.
//  $body_value = str_replace('&#39;', '\'', $body_value);
//  if ( $body_summary ) {
//    $body_summary = str_replace('&#39;', '\'', $body_summary);
//  }
//  //Handle numeric codes correctly.
//  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
//  $body_value = preg_replace('/&#(\d+);/me',"chr(\\1)",$body_value); #decimal notation
//  $body_value = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$body_value);  #hex notation
//  if ( $body_summary ) {
//    $body_summary = preg_replace('/&#(\d+);/me',"chr(\\1)",$body_summary); #decimal notation
//    $body_summary = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$body_summary);  #hex notation
//  }
//  //HTML entities to their real characters.
//  $body_value = html_entity_decode( $body_value );
//  if ( $body_summary ) {
//    $body_summary = html_entity_decode( $body_summary );
//  }
//  //Special chars - particularly #39; -> '.
//  $body_value = htmlspecialchars_decode( $body_value );
//  if ( $body_summary ) {
//    $body_summary = htmlspecialchars_decode( $body_summary );
//  }
//  //Trigger other module's translators.
//  drupal_alter( 'edithtml_2_directive', $body_value); //, $type );
//  if ( $body_summary ) {
//    drupal_alter('edithtml_2_directive', $body_summary); //, $type );
//  }
//  //Replace image HTML tags with directives.
//  //  These must be after other module's hooks are called, so that other 
//  //  modules have processes the images they own.
//  swim_img_2_directive( $body_value );
//  if ( $body_summary ) {
//    swim_img_2_directive( $body_summary );
//  }
  //Put processed values (ReST now) back into body field.
  $form_state['values']['body'][LANGUAGE_NONE][0]['value'] = $body_value;
  if ( $body_summary ) {
    $form_state['values']['body'][LANGUAGE_NONE][0]['summary'] = $body_summary;
  }
}

/**
 * Convert content from CKHTML (HTML from CK field) to pure ReST.
 * @param string $content Content to convert.
 */
function _swim_ckhtml2rest( &$content ) {
  //Convert to pure ReST.
  //First, the <br>s/ leaving just the \ns.
  swim_remove_brs( $content );
  //Replace &nbsp; with real spaces.
  $content = str_replace('&nbsp;', ' ', $content);
  //Replace &#39; with real quotes.
  $content = str_replace('&#39;', '\'', $content);
  //Handle numeric codes correctly.
  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
  $content = preg_replace('/&#(\d+);/me',"chr(\\1)",$content); #decimal notation
  $content = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$content);  #hex notation
  //HTML entities to their real characters.
  $content = html_entity_decode( $content );
  //Special chars - particularly #39; -> '.
  $content = htmlspecialchars_decode( $content );
  //Trigger other module's translators.
  drupal_alter( 'edithtml_2_directive', $content); //, $type );
  //Replace image HTML tags with directives.
  //  These must be after other module's hooks are called, so that other 
  //  modules have processes the images they own.
  swim_img_2_path( $content );
}

/**
 * Remove <br>s from $content. 
 * @param type $content Content to remove <br>s from.
 */
function swim_remove_brs( &$content ) {
  $content = preg_replace('/\<\s*br\s*\/?\s*\>/i', '', $content);
}

/**
 * Replace img tags with just the src attribute.
 * @param string $content The entire img tag.
 * @return string The src (path).
 */
function swim_img_2_path( &$content ) {
  //Pattern to find the img tags. Need the ? to make the match lazy, not greedy.
  $pattern = '/<img.*?>/im';
  $content = preg_replace_callback(
      $pattern, 
      function ($matches) {
        //Got an image tag.
        //Parse it with QueryPath
        $src = htmlqp($matches[0], 'img')->attr('src');
        return $src;
      },
      $content
  );
      $r=5;
}

/*
function swim_img_2_directive( &$content ) {
  //Pattern to find the img tags. Need the ? to make the match lazy, not greedy.
  $pattern = '/<img.*?>/im';
  $content = preg_replace_callback(
      $pattern, 
      function ($matches) {
        //Got an image tag.
        //Parse it with QueryPath
        $file = htmlqp($matches[0], 'img')->attr('src');
        $alt = htmlqp($matches[0], 'img')->attr('alt');
        $width = htmlqp($matches[0], 'img')->attr('width');
        $height = htmlqp($matches[0], 'img')->attr('height');
        $scale = htmlqp($matches[0], 'img')->attr('scale');
        $target = htmlqp($matches[0], 'img')->attr('target');
        $class = htmlqp($matches[0], 'img')->attr('class');
        $name = htmlqp($matches[0], 'img')->attr('name');
        $options = $alt || $width || $height || $scale 
            || $target || $class || $name;
        $directive = '.. image:: ' . $file;
        if ( $options ) {
          $directive .= "\n";
          if ( $alt ) {
            $directive .= '    :alt: ' . $alt . "\n";
          }
          if ( $width ) {
            $directive .= '    :width: ' . $width . "\n";
          }
          if ( $height ) {
            $directive .= '    :height: ' . $height . "\n";
          }
          if ( $scale ) {
            $directive .= '    :scale: ' . $scale . "\n";
          }
          if ( $target ) {
            $directive .= '    :target: ' . $target . "\n";
          }
          if ( $class ) {
            $directive .= '    :class: ' . $class . "\n";
          }
          if ( $name ) {
            $directive .= '    :name: ' . $name . "\n";
          }
        }
        return $directive;
      },
      $content
  );
}
 */

/**
 * Return a page with the right media queries and such, and a place to 
 * put markup. MT otherwise.
 */
function swim_mt_peek() {
  //Check perm.
  if ( !user_access('peek content') ) {
    return MENU_ACCESS_DENIED;
  }
  //Suppress the admin menu.
  if ( module_exists('admin_menu') ) {
    module_invoke('admin_menu', 'suppress');
  }
  //Return some MT content. The theme system will wrap this in stuff that
  //the theme usually wraps content in.
  return '<div id="cyco-mt-content-container"/>';
}

/**
 * Return rendered HTML for preview.
 */
function swim_peek() {
  //Convert the content to HTML.
  $content = $_POST['content'];
  //Convert content to pure ReST, so can call the ReST input filter.
  _swim_ckhtml2rest($content);
  //Convert the ReST content to HTML.
  $fake_filter_object = new stdClass();
//  $fake_filter_object->settings = array();
  $html = swim_process_filter($content, $fake_filter_object);
  //Return rendered content. 
  drupal_json_output( array( 
        'status' => 'success',
        'result' => $html,
  ));
  drupal_exit();  
}

/**
 * Return the theme to use for popup windows, by inspecting the 
 * destination.
 */
function swim_custom_theme() {
  if ( current_path() == 'swim-mt-peek' ) {
    return 'cybercourse_mt';
  }
}

/**
* Implements hook_filter_info().
*/
function swim_filter_info() {
  $filters['filter_swim'] = array(
    'title' => t('SWIM'),
    'description' => t('Show What I Mean'),
    'process callback' => 'swim_process_filter',
  );
  return $filters;
}

/**
 * SWIM text formatter. Translates pure ReST into viewHTML. See SWIM docs
 * for more.
 * @param string $text SWIM text to translate.
 */
function swim_process_filter($text, $filter, $format = 'SWIM', $langcode = 'und') {
  //Run content through ReST translator. Returns mixed ReST and CyCo markup.
  // descriptor array
  $desc = array(
      0 => array('pipe', 'r'), // 0 is STDIN for process
      1 => array('pipe', 'w'), // 1 is STDOUT for process
      2 => array('pipe', 'w') // 2 is STDERR for process - IS THIS RIGHT?
  );
  //Can't remember where this code was adapted from. Some human did it.
  //Command to invoke markup engine
  $py_path = DRUPAL_ROOT . '/' 
      . drupal_get_path('module', 'swim') .'/python/convert_rest.py';
  $command =  'python ' . $py_path;
  // spawn the process
  $p = proc_open($command, $desc, $pipes);
  fwrite($pipes[0], $text);
  fclose($pipes[0]);
  // read the output from the engine
  $html = stream_get_contents($pipes[1]);
  $error_messages = stream_get_contents($pipes[2]);
  // all done! Clean up
  fclose($pipes[1]);
  fclose($pipes[2]);
  proc_close($p);
  //Show error messages, if any.
  if ( $error_messages ) {
    $error_messages = _swim_format_docutils_errors( $error_messages );
    drupal_set_message($error_messages, 'error');
  }
  
  //Translate the CyCo directives markup into HTML
  //Trigger other module's translators.
  drupal_alter( 'cycomarkup_2_viewhtml', $html );
  return $html;
}

/**
 * Change error messages from Python's docutils into something that
 * will look OK for a drupal_set_message(). Sample input:
 * <string>:5: (ERROR/3) Error in "image" directive:
 * 1 argument(s) required, 0 supplied.
 * 
 * .. image::
 * 
 * @param string $docutils_error_messages Error messages returned from Python.
 * @return string Messages formatted for drupal_set_message().
 */
function _swim_format_docutils_errors( $docutils_error_messages ) {
  $drupal_message = str_replace('<string>', '', $docutils_error_messages);
  $drupal_message = preg_replace('/\:[0-9]+\:\ /m', '', $drupal_message);
  // :, then 1 or more digits, then :, then space.
  $drupal_message = str_replace("\n", '<br>', $drupal_message);
  $themed_message = theme(
      'swim_format_error', 
      array(
        'message' => $drupal_message,
        'help_url' => SWIM_FORMAT_ERROR_HELP_URL,
      )
  );
  return $themed_message;
}
/**
 * Implements hook_theme().
 */
function swim_theme() {
  $theme_functions = array(
    'swim_format_error' => array(
      'variables' => array(
        'message' => NULL, 
        'help_url' =>NULL
      ),
    )
  );
  return $theme_functions;
}

/**
 * Theme a SWIM format error.
 * @param array $variables Message, and help URL.
 * @return string HTML to show.
 */
function theme_swim_format_error( $variables ) {
  $message = $variables['message'];
  $help_url = $variables['help_url'];
  $help_link = l( t('help on fixing things'), $help_url );
  $output = 
      '<div class="swim_format_error">'
        . '<p>' 
        .   t('Snap! The formatting system is confused. You can get some ') 
        .   $help_link . t( '.' )
        . '</p>'
        . '<div class="swim_format_error_message">'
        .   t( $message )
        . '</div>'
    . '</div>';
  return $output;
}

/**
 * Wrap img tags in ReST raw directive (stand-alone) and role (inline).
 * @param string $text Text to be treated.
 * @return string Result.
 */
function swim_wrap_imgs( $text ) {
  $pattern = '/^(.*)\<img\s*(.*)\/?\>(.*)$/im';
  $text = preg_replace_callback(
      $pattern, 
      function ($matches) {
        $left = $matches[1];
        $left_empty = (strlen(trim($left)) == 0);
        $img_properties = $matches[2];
        $right = $matches[3];
        $right_empty = (strlen(trim($right)) == 0);
        //Stand-alone or inline image?
        if ( $left_empty && $right_empty ) {
          //Use a directive
          $replacement = '.. raw:: html' . PHP_EOL . PHP_EOL 
              . '  <img ' . $img_properties . '>';
        }
        else {
          //Use a role.
          $replacement = $left . ' :raw-role:`<img ' . $img_properties . '>` ' . $right;
        }
        return $replacement;
      },
      $text
  );
  //Define raw-role.
  $text = '.. role:: raw-role(raw)' . PHP_EOL 
        . '   :format: html' . PHP_EOL 
        . PHP_EOL 
        . $text;
  return $text;
}

/**
 * User tips about the input filter.
 */
function swim_tips($filter, $format, $long = FALSE) {
  return t('Failure is not an option. It comes standard on all models.');
}

/**
 * Implements hook_preprocess_page.
 * 
 * Add "swim" class if the SWIM filter was used.
 * See https://drupal.org/node/805006
 */
function swim_process_html(&$variables) {
  //Is SWIM CSS added to the page?
  $css_path = drupal_get_path('module', 'swim') . '/css/swim.css';
  if ( array_key_exists($css_path, $variables['css']) ) {
    //Check if class not already in array.
    if ( ! in_array( 'swim', $variables['classes_array'] ) ) {
      $variables['classes_array'][] = 'swim';
      $variables['classes'] .= ' swim';
    }
  }
}

/**
 * Implements hook_block_info().
 */
function swim_block_info() {
  $blocks = array();
  $blocks['swim_markup'] = array(
    'info' => 'SWIM Markup',
  );
  return $blocks;  
}

/**
 * Implements hook_block_view().
 */
function swim_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'swim_markup' :
      $block['subject'] = 'Editing tips';
      $block['content'] = swim_markup_help();
      return $block;
      break;
  }
}

/**
 * Some help for SWIM, on node editing pages.
 * @return string
 */
function swim_markup_help() {
  $help = 
'<p>' . t('
Blank lines separate paragraphs.
') . '</p>
<p>' . t('Headings:') . '</p>
<p class="tips-code-look">
' . t('Level 1<br>
=======<br>
Level 2<br>
-------<br>
Level 3<br>
~~~~~~~
') . '</p>
<p><code>*' . t('italics') . '*</code>,
 and <code>**' . t('bold') . '**</code>.</p>
<p class="tips-code-look">&nbsp;&nbsp;&nbsp;' . t('Indented quote.') . '</p>
<p class="tips-code-look">* ' . t('Bulleted lists.') . '<br>
        * ' . t('Put blank lines') . '<br>
        * ' . t('around lists.') . '
</p>
<p class="tips-code-look">1. ' . t('A numbered list') . '<br>
1. ' . t('Is like this.') . '<br>
1. ' . t('Another one.') . '
</p>
<p>' . t('Any numbers will do.') . '
</p>

<p class="tips-code-look">.. sidebar:: Title<br><br>
' . t('&nbsp;&nbsp;&nbsp;This is a sidebar.') . '<br><br>
' . t('&nbsp;&nbsp;&nbsp;More of it.') . '
</p>
<p class="tips-code-look">.. pseudent:: aila_tea<br>
' . t('   Hi from Aila, drinking tea.') . '
</p>
<p>' . t('Link:') . '<br><small><code>' . 
      t('`Link text &lt;http://example.com/&gt;`_') . '</code></small></p>';
  if ( user_access('peek content') ) {
    $help .= 
      '<p>' . t('Use the peek button to see how your content will look on '
      . 'different devices.') . '
      </p>';
  }
  return $help;
}
