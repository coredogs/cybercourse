<?php
define( 'RELATION_NAME_ITEM_TO_KM', 'is_part_of_knowledge_map');
define( 'RELATION_NAME_KM_ITEM_CONNECTION', 'is_connected_to');

define( 'DRAWING_ID_CACHE_NAME', 'knowledgemap_drawing_id_cache');

//define( 'NEW_KM_ITEM_INDICATOR', '(New modal)');

module_load_include('inc', 'knowledgemap', 'knowledgemap.utils');
module_load_include('inc', 'knowledgemap', 'kmItemType.inc');
module_load_include('inc', 'knowledgemap', 'kmItem.inc');

/**
 * Implements hook_init().
 * Load CTools stuff needed for the node edit form.
 */
//function knowledgemap_init() {
//  ctools_include('ajax');
//  ctools_include('modal');
//  drupal_add_js('misc/ajax.js');
//  ctools_modal_add_js('ajax-responder');
//  ctools_modal_add_js('modal');
//  ctools_include('node.pages', 'node', '');
//}

/**
 * Implements hook_menu.
 */
function knowledgemap_menu() {
  //Add a new item. Passing in the coords of the mouse click, and the 
  //nid of the KM that will own the new item.
  $items['add-km-item-ajax'] = array(
    'page callback' => 'knowledgemap_add_item_ajax',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'knowledge_map_item'),
//    'access callback' => 'knowledgemap_menu_access',
    'type' => MENU_CALLBACK,
  );
  //Show CTools modal.
  //Need theme callback so that the modal will use the admin theme, not the
  //main theme.
  $items['edit-km-item/%node/%ctools_js'] = array(
    'title' => 'Edit',
    'page callback' => 'knowledgemap_edit_item_ctools',
    'page arguments' => array(1, 2),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'theme callback' => '_km_admin_theme'
  );
  $items['update-km-item-pos'] = array(
    'page callback' => 'knowledgemap_save_item_position',
//    'access callback' => 'node_access',
//    'access arguments' => array('update', 1),
    'access callback' => 'knowledgemap_update_item_access',
    'type' => MENU_CALLBACK,
  );
  $items['delete-item-ajax/%node'] = array(
    'page callback' => 'knowledgemap_delete_item',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 1),
//    'access callback' => 'knowledgemap_menu_access',
    'type' => MENU_CALLBACK,
  );
  //User made a new connection. Save it.
  //Access check is on map item, not connection.
  $items['save-new-connection'] = array(
    'page callback' => 'knowledgemap_save_new_connection',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'knowledge_map_item'),
//    'access callback' => 'knowledgemap_menu_access',
    'type' => MENU_CALLBACK,
  );
  //Save connection required field for a connection. AJAX call.
  //Access check is on map item, not connection.
  $items['set-connection-required-ajax'] = array(
    'page callback' => 'knowledgemap_set_connection_required',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'knowledge_map_item'),
//    'access callback' => 'knowledgemap_menu_access',
    'type' => MENU_CALLBACK,
  );
  //User wants to delete a connection.
  //Access check is on map item, not connection.
  $items['delete-connection-ajax'] = array(
    'page callback' => 'knowledgemap_delete_connection',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'knowledge_map_item'),
//    'access callback' => 'knowledgemap_menu_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function _km_admin_theme() {
  $theme = variable_get('admin_theme', 'seven');
  return $theme;
}

function knowledgemap_permission() {
  return array(
    'view learningmap' => array(
      'title' => t('View learning maps'),
      'description' => t('Look at learning maps.'),
    ),
//    'edit learningmap' => array(
//      'title' => t('Edit learning maps'),
//      'description' => t('Change learning maps.'),
//    ),
  );
}


function knowledgemap_update_item_access() {
  $item_nid = $_POST['km_item_nid'];
  $node = node_load( $item_nid );
  $access = node_access( 'update', $node );
  return $access;
}

/**
 * Menu access callback.
 * @return boolean True if user has right role.
 */
//function knowledgemap_menu_access() {
//  global $user;
//  $access = in_array('administrator', $user->roles)
//      || in_array('author', $user->roles);
//  return $access;
//}

/**
 * Implements hook_swim_peek_access().
 * 
 * People who can see knowledge maps can call the peek function in
 * SWIM. 
 */
function knowledgemap_swim_peek_access() {
  return user_access('view learningmap');
}

/**
 * Implements hook_field_info(). 
 * Creates one formatter and one input widget.
 */
function knowledgemap_field_info() {
  return array(
    'knowledgemap' => array(
      'label' => t('Knowledge map'),
      'description' => 
        t('This field stores a display of a knowledge map.'),
      'default_formatter' => 'knowledgemap_formatter',
      'default_widget' => 'knowledgemap_widget',
      'instance_settings' => array(
        'default_value' => ' ',
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function knowledgemap_field_is_empty($item, $field) {
  if (!isset($item['knowledgemap']) || $item['knowledgemap'] === '') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info.
 * 
 * Describes a widget for the KM field.
 * 
 */
function knowledgemap_field_widget_info() {
    return array(
      'knowledgemap_widget' => array(
      'label' => t('Knowledge map'),
      'description' => t(
          'Allow the user to edit KMs.'),
      'field types' => array('knowledgemap'),
    ),
  );
}

/**
 * Define the widget for the KM. 
 */
function knowledgemap_field_widget_form(&$form, &$form_state, 
    $field, $instance, $langcode, $items, $delta, $element) {
  
    //$element contains some of the Right Stuff already. Add to it.
  $base = $element;
  //Can't add KM items on new node.
  //Is this a new node? $node is the KM node that has the widget in it.
  $new_node = TRUE;
  if ( isset( $form_state['node'] ) ) {
    if ( isset( $form_state['node']->nid ) && ! isset($node->is_new)) {
      $new_node = FALSE;
    }
  }
  if ( $new_node ) {
    $element[$delta] = array(
      '#type' => 'markup',
      '#markup' => '<p class="lead">' 
          . t('(You can add knowledge map items only after the knowledge map '
          . 'has been created.)') . '</p>',
    ) + $base;
    return $element;
  }
  //This is a node edit.
  $node = $form_state['node'];
  //What is the DOM id of the drawing area?
  $nid = $node->nid;
  $drawing_dom_id 
      = knowledgemap_compute_drawing_id( $nid );
  //Cache for later.
  knowledgemap_store_in_cache( DRAWING_ID_CACHE_NAME, $drawing_dom_id );
  $output = '';
  //Make container.
  $output .= 
         knowledgemap_template($drawing_dom_id);
  //Make <div> for the drawing and item areas.
  $element[$delta] = array(
    '#type' => 'markup',
    '#markup' => $output,
  ) + $base;
  //Send the map data to the JS.
  //Set some other settings at the same time.
  $knowledgemap_rep = knowledgemap_make_km_rep($node->nid);
  //Get allowed item types.
  $all_fields = field_info_fields();
  $allowed_item_types = list_allowed_values($all_fields['field_item_type']);
  $settings = array(
    'drawing_dom_id' => $drawing_dom_id,
    'km_nid' => $nid, //The nid of the KM being shown.
    'knowledgemap_rep' => $knowledgemap_rep,
    'mode' => 'edit', //Editing mode.
    'all_item_types' => $allowed_item_types,
  );
  //Cannot cache this file.
  drupal_add_js(
      array('knowledgemap' => $settings),
      'setting',
      array( 'cache' => FALSE )
  );
  knowledgemap_add_client_code();
  return $element;
}


function knowledgemap_add_client_code() {
  //Add libraries.
  // Try to load the library and check if that worked.
  $library = libraries_load('spin');
  if ( empty($library['loaded']) || ! $library['loaded'] ) {
    drupal_set_message('Learning map: spin library missing.');
  }
  
  ctools_include('ajax');
  ctools_include('modal');
  drupal_add_js('misc/ajax.js');
  ctools_modal_add_js('ajax-responder');
  ctools_modal_add_js('modal');
  ctools_include('node.pages', 'node', '');
  
//  drupal_add_css(
//      drupal_get_path('module', 'ctools') 
//          . '/css/modal.css', 
//      'file'
//  );  
  
//  ctools_include('ajax');
//  drupal_add_js('misc/ajax.js');  
//  ctools_include('modal');
//  ctools_modal_add_js('ajax-responder');
//  ctools_modal_add_js('modal');
  
  drupal_add_library('system', 'ui');  
  drupal_add_library('system', 'ui.dialog');
//  drupal_add_js(
//      drupal_get_path('module', 'knowledgemap') 
//          . '/libs/jquery-ui-1.10.3.custom/js/jquery-ui-1.10.3.custom.min.js', 
//      'file'
//  );  
//  drupal_add_js(
//      drupal_get_path('module', 'knowledgemap') 
//          . '/libs/blockui/jquery.blockUI.js', 
//      'file'
//  );
  
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap') 
          . '/css/ctools_modal_extras.css', 
      'file'
  ); 
  
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/libs/jsPlumb/jquery.jsPlumb-1.4.1-all-min.js', 
      'file'
  );
  //Add the KM drawing code.
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/js/knowledgemap_utils.js', 
      'file'
  );  
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/js/knowledgemap_item_viewer.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap') 
          . '/css/knowledgemap_item_viewer.css', 
      'file'
  );
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/js/knowledgemap.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap') 
          . '/css/knowledgemap.css', 
      'file'
  );
//  drupal_add_js(
//      drupal_get_path('module', 'knowledgemap') 
//          . '/libs/jquery-dialogextend/build/jquery.dialogextend.min.js', 
//      'file'
//  );
  drupal_add_js(
      drupal_get_path('module', 'knowledgemap') 
          . '/libs/jquery-collapse/src/jquery.collapse.js', 
      'file'
  );
  drupal_add_css(
      drupal_get_path('module', 'knowledgemap') 
          . '/css/jquery-collapse.css', 
      'file'
  );
//  $x = drupal_add_js(
//      drupal_get_path('module', 'knowledgemap') 
//          . '/libs/jquery-getscrollbarsize/getscrollbarsize.js', 
//      'file'
//  );
  
}


function knowledgemap_make_km_rep($km_nid) {
  //Run the view showing KM items linked to the given KM.
  $view_results = views_get_view_result( 'items_related_to_km', 'default', $km_nid );
  //Store in array for JSONing later.
  $km_items = array();
  foreach( $view_results as $record ) {
    $nid = $record->nid;
    $title = $record->node_title;
    $item_type = isset( $record->field_field_item_type[0]['raw']['value'] ) 
        ? $record->field_field_item_type[0]['raw']['value'] : '';
    $importance = isset( $record->field_field_importance[0]['raw']['value'] ) 
        ? $record->field_field_importance[0]['raw']['value'] : '';
    //Note: sends summary of the body only.
    $body = isset( $record->field_body[0]['raw']['summary'] ) 
        ? $record->field_body[0]['raw']['summary'] : '';
    $coord_x = isset( $record->field_field_coord_x[0]['raw']['value'] ) 
        ? $record->field_field_coord_x[0]['raw']['value'] : '';
    $coord_y = isset( $record->field_field_coord_y[0]['raw']['value'] ) 
        ? $record->field_field_coord_y[0]['raw']['value'] : '';
    $km_items[$nid] = array(
      'nid' => $nid,
      'title' => $title,
      'item_type' => $item_type,
      'importance' => $importance,
      'body' => $body,
      'coord_x' => $coord_x,
      'coord_y' => $coord_y,
    );
  }
  //Get KM item connection data.
  $view_results = views_get_view_result(
      'km_items_linked_to_other_km_items', 
      'default', 
      $km_nid
  );
  $connections = array();
  foreach ( $view_results as $record ) {
    $entity = $record->_field_data['relation_node_rid']['entity'];
    $rid = $entity->rid;
    $from_nid = $entity->endpoints[LANGUAGE_NONE][0]['entity_id'];
    $to_nid = $entity->endpoints[LANGUAGE_NONE][1]['entity_id'];
    $required = $entity->field_required[LANGUAGE_NONE][0]['value'];
    $connections[$rid] = array(
      'rid' => $rid,
      'from_nid' => $from_nid,
      'to_nid' => $to_nid,
      'required' => $required,
    );
  }
  return array(
    'km_items' => $km_items,
    'connections' => $connections,
  );
}

function knowledgemap_add_item_ajax() {
  $title = $_POST['title'];
  $item_type = $_POST['item_type'];
  $importance = $_POST['importance'];
  $coord_x = $_POST['coord_x'];
  $coord_y = $_POST['coord_y'];
  $km_nid = $_POST['km_nid'];
  //Make a blank node.
  global $user;
  $new_node = (object) array(
    'title' => $title, 
    'uid' => $user->uid, 
    'name' => (isset($user->name) ? $user->name : ''), 
    'type' => 'knowledge_map_item', 
    'language' => LANGUAGE_NONE,
  );
  //Store the mouse coords in the new item.
  $new_node->field_coord_x[LANGUAGE_NONE][0]['value'] = $coord_x;
  $new_node->field_coord_y[LANGUAGE_NONE][0]['value'] = $coord_y;
  $new_node->field_item_type[LANGUAGE_NONE][0]['value'] = $item_type;
  if ( $importance ) {
    $new_node->field_importance[LANGUAGE_NONE][0]['value'] = $importance;
  }
  node_save($new_node);
  $new_node_id = $new_node->nid;
  //@todo Check for fail here.
  //Add a new relation.
  $endpoints = array(
    array('entity_type' => 'node', 'entity_id' => $new_node_id),
    array('entity_type' => 'node', 'entity_id' => $km_nid),
  );
  //Create new relation object.
  $new_relation = relation_create(RELATION_NAME_ITEM_TO_KM, $endpoints);
  //Save it.
  $rid = relation_save($new_relation);
  drupal_json_output( array( 
        'status' => 'success',
        'new_nid' => $new_node_id,
        'message' => 'Item created'
  ));
  drupal_exit();
}

/**
 * Implements hook_form_alter().
 * 
 * It adds a link to the KM edit form. That link can open a KM item edit
 * form in a modal. The link is copied onto each item viewer dialog.
 * It's done this way so that ctools will add the right event listener
 * to the link. The link has to be on the form.
 */
function knowledgemap_form_alter(&$form, &$form_state, $form_id) {
  if ( $form_id == 'learning_map_node_form' ) {
    //The KM form, NOT the KM item form.
    //Only add a modal edit link for edits, not adds.
    $new_node = TRUE;
    if ( isset( $form_state['node'] ) ) {
      if ( isset( $form_state['node']->nid ) && ! isset($node->is_new)) {
        $new_node = FALSE;
      }
    }
    if ( ! $new_node ) {
//      ctools_include('modal');
      global $base_url;
      $km_item_edit_link = ctools_modal_text_button(
          t('Edit'),
          $base_url . '/edit-km-item/km-item-nid/nojs',
          t('Edit'),
          'km-item-edit-link-original'
      );
      $form['km_item_edit_link'] = array(
        '#weight' => 500,
        '#type' => 'markup',
        '#markup' => $km_item_edit_link,
      );
    }    
  }
  else if ( $form_id == 'knowledge_map_item_node_form' ) {
    //The KM item edit form.
    //Erase Drupal's status messages.
    drupal_get_messages('status');
    //Remove the preview button.
    if ( isset( $form['actions']['preview'] ) ) {
      unset( $form['actions']['preview'] );
    }
    //Remove the view changes button.
    if ( isset( $form['actions']['preview_changes'] ) ) {
      unset( $form['actions']['preview_changes'] );
    }
    //Remove the delete button.
    if ( isset( $form['actions']['delete'] ) ) {
      unset( $form['actions']['delete'] );
    }
    //Add a cancel button.
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => 'Cancel',
      '#submit' => array('knowledgemap_cancel_edit'),
      '#weight' => 15,
    );
  }
}

/**
 * Execute edit cancel callback from modal.
 */
function knowledgemap_cancel_edit($form, &$form_state) {
  $nid = $form['#node']->nid;
  $commands = array();
  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();
  print ajax_render($commands);
  exit;
}

/**
 * Page Callback - Modal: Edit Node.
 */
function knowledgemap_edit_item_ctools($node, $js = NULL) {
  // Check $js.
  if (!$js) {
    return drupal_access_denied();
  }
  
  knowledgemap_add_client_code(); 
//  ctools_include('ajax');
//  ctools_include('modal');
//  drupal_add_js('misc/ajax.js');
//  ctools_modal_add_js('ajax-responder');
//  ctools_modal_add_js('modal');
//  ctools_include('node.pages', 'node', '');
//  
//    drupal_add_library('system', 'ui');  
//  drupal_add_library('system', 'ui.dialog');

  
  $type_name = node_type_get_name($node);
  $title = t('<em>Edit @type</em> @title', 
      array('@type' => $type_name, '@title' => $node->title)
  );
  $commands = array();
  $form_state = array(
    'title' => $title,
    'ajax'  => TRUE,
    'build_info' => array(
      'args'  => array($node),
    ),
  );
  $commands = ctools_modal_form_wrapper($node->type . '_node_form', $form_state);
  if (!empty($form_state['executed']) && empty($form_state['rebuild'])) {
      $node = $form_state['node'];
      // overwrite commands.
      $commands = array();
      ctools_add_js('ajax-responder');
      $commands[] = ctools_modal_command_dismiss();
      //Send new item data to the client.
      $new_item_data = array(
        'knowledgemap' => array(
          'new_item_data' => array(
            'nid' => $node->nid,
            'item_type' => $node->field_item_type[LANGUAGE_NONE][0]['value'],
            'title' => $node->title,
            'body' => 
                isset( $node->body[LANGUAGE_NONE][0]['summary'] )
                  ? $node->body[LANGUAGE_NONE][0]['summary']
                  : '',
            'importance' => 
                isset( $node->field_importance[LANGUAGE_NONE][0]['value'] )
                  ? $node->field_importance[LANGUAGE_NONE][0]['value']
                  : '',
          ),
        ),
      );
      $commands[] = ajax_command_settings($new_item_data, TRUE);
      $commands[] = ajax_command_invoke(
          NULL, 
          'returnFromKmEditSave', 
          array( $node->nid )
      );
  }
  print ajax_render($commands);
  exit;
}

/**
 * Save the new screen position os an item.
 */
function knowledgemap_save_item_position() {
  try {
    //Check that required data is in call.
    if (    ! isset( $_POST['coord_x'] ) 
         || ! isset( $_POST['coord_y'] )
         || ! isset( $_POST['km_item_nid'] )
       ) {
      throw new Exception('Required data missing. Need x, y, and km_nid.');
    }
    //Get data from call.
    $coord_x = $_POST['coord_x'];
    $coord_y = $_POST['coord_y'];
    $km_item_nid = $_POST['km_item_nid'];  
    //Load the item to be updated.
    $node = node_load( $km_item_nid );
    if ( ! $node ) {
      throw new Exception( 
          t( 'Could not load node with nid !km_item_nid.', 
              array( '!km_item_nid' => $km_item_nid )
          )
      );
    }
    //Change the node's data.
    $node->field_coord_x[LANGUAGE_NONE][0]['value'] = $coord_x;
    $node->field_coord_y[LANGUAGE_NONE][0]['value'] = $coord_y;
    //Save.
    node_save($node);
    //Return success flag.
    drupal_json_output( array( 
        'status' => 'success',
        'message' => 'Position saved.'
    ));
    drupal_exit();  
  } catch (Exception $e) {
    $message = knowledgemap_log_exception($e);
    drupal_json_output( array( 
        'status' => 'error',
        'message' => $message,
    ));
    drupal_exit();
  }
}

function knowledgemap_save_new_connection() {
  try {
    //Check that required data is in call.
    if (    ! isset( $_POST['source_km_item_nid'] ) 
         || ! isset( $_POST['target_km_item_nid'] )
         || ! isset( $_POST['required'] )
       ) {
      throw new Exception(
          'Required connection data missing. Need two nids, and type.'
      );
    }
    //Get data from call.
    $source_km_item_nid = $_POST['source_km_item_nid'];
    $target_km_item_nid = $_POST['target_km_item_nid'];
    $required = $_POST['required'];
    if ( $source_km_item_nid == $target_km_item_nid ) {
      throw new Exception('Cannot link an item itself.');
    }
    //@todo check nodes exist.
    //@todo check connection type.
    //Add a new relation.
    $endpoints = array(
      array('entity_type' => 'node', 'entity_id' => $source_km_item_nid),
      array('entity_type' => 'node', 'entity_id' => $target_km_item_nid),
    );
    //Create new relation object.
    $new_relation = relation_create(RELATION_NAME_KM_ITEM_CONNECTION, $endpoints);
    $new_relation->field_required[LANGUAGE_NONE][0]['value'] = $required;
    //Save it.
    $rid = relation_save($new_relation);
    if ( ! $rid ) {
      throw new Exception( 
          t( 'Could not save relation from !source_km_item_nid to 
              !target_km_item_nid.', 
              array( 
                '!source_km_item_nid' => $source_km_item_nid,
                '!target_km_item_nid' => $target_km_item_nid,
              )
          )
      );
    }
    //Return success flag.
    drupal_json_output( array( 
        'status' => 'success',
        'message' => 'Connection saved.',
        'rid' => $rid,
    ));
    drupal_exit();  
  } catch (Exception $e) {
    $message = knowledgemap_log_exception($e);
    drupal_json_output( array( 
        'status' => 'error',
        'message' => $message,
    ));
    drupal_exit();
  }
}

/**
 * Set the required field of a connection. AJAX call.
 * @throws Exception Something bad happened. 
 */
function knowledgemap_set_connection_required() {
  try {
    //Check that required data is in call.
    if (    ! isset( $_POST['rid'] ) 
         || ! isset( $_POST['required'] )
       ) {
      throw new Exception(
          'knowledgemap_set_connection_type: Required connection data missing. 
            Need rid, and required.'
      );
    }
    //Get data from call.
    $rid = $_POST['rid'];
    //@todo check relation exists.
    $required = $_POST['required'];
    if ( $required != 'required' && $required != 'reinforcing' ) {
      throw new Exception(
          'knowledgemap_set_connection_type: Bad required option: ' . $required
      );
    }
    //Edit the new relation.
    $relation = relation_load($rid);
    if ( ! $relation ) {
      throw new Exception(
          'knowledgemap_set_connection_type: Relation did not load. rid: ' 
            . $rid
      );
    }
    $relation->field_required[LANGUAGE_NONE][0]['value'] = $required;
    //Save it.
    relation_save($relation);
    //Return success flag.
    drupal_json_output( array( 
        'status' => 'success',
        'message' => 'Required field saved.',
        'rid' => $rid,
    ));
    drupal_exit();  
  } catch (Exception $e) {
    $message = knowledgemap_log_exception($e);
    drupal_json_output( array( 
        'status' => 'error',
        'message' => $message,
    ));
    drupal_exit();
  }  
}

/**
 * Delete a connection. AJAX call.
 * @throws Exception Something bad happened. 
 */
function knowledgemap_delete_connection() {
  try {
    //Check that required data is in call.
    if (    ! isset( $_POST['rid'] ) 
       ) {
      throw new Exception(
          'Required connection data missing. Need rid.'
      );
    }
    //Get data from call.
    $rid = $_POST['rid'];
    //Check that the relation exists.
    $relation = relation_load($rid);
    if ( ! $relation ) {
      throw new Exception(
          'Relation did not load. rid: ' 
            . $rid
      );
    }
    //Remove it.
    relation_delete($rid);
    //Return success flag.
    drupal_json_output( array( 
        'status' => 'success',
        'message' => 'Relation deleted.',
        'rid' => $rid,
    ));
    drupal_exit();  
  } catch (Exception $e) {
    $message = knowledgemap_log_exception($e);
    drupal_json_output( array( 
        'status' => 'error',
        'message' => 'knowledgemap_delete_connection: ' . $message,
    ));
    drupal_exit();
  }  
}


/**
 * Delete an item. AJAX call.
 * This will delete all connections as well.
 * @param int $nid Nid of item to delete.
 * @throws Exception Something bad happened. 
 */
function knowledgemap_delete_item( $nid ) {
  try {
    //Check that the node exists.
    $node = node_load($nid);
    if ( ! $node ) {
      throw new Exception(
          'Node did not load. nid: ' . $nid
      );
    }
    //Remove it.
    node_delete($nid);
    //Return success flag.
    drupal_json_output( array( 
        'status' => 'success',
        'message' => 'Item deleted.',
        'nid' => $nid,
    ));
    drupal_exit();  
  } catch (Exception $e) {
    $message = knowledgemap_log_exception($e);
    drupal_json_output( array( 
        'status' => 'error',
        'message' => 'knowledgemap_delete_item: ' . $message,
    ));
    drupal_exit();
  }  
}

/**
 * Implements hook_field_formattter_info().
 */
function knowledgemap_field_formatter_info() {
  return array(
    'knowledgemap_formatter' => array(
      'label' => t('Knowledge map'),
//      'description' => t('Allow the user to view KMs.'),
      'field types' => array('knowledgemap'),
    ),
  );
}

function knowledgemap_field_formatter_view($entity_type, $entity, $field, 
    $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'knowledgemap_formatter':
      foreach ($items as $delta => $item) {
        //This only runs once. Always single valued.
        //What is the DOM id of the drawing area?
        $nid = $entity->nid;
        $drawing_dom_id 
            = knowledgemap_compute_drawing_id( $nid );
        //Cache for later.
        knowledgemap_store_in_cache( DRAWING_ID_CACHE_NAME, $drawing_dom_id );
        $output = '';
        //Make container.
        $output .= 
               knowledgemap_template($drawing_dom_id);
        //Make <div> for the drawing and item areas.
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => $output,
        ); // + $base;
        //Send the map data to the JS.
        //Set some other settings at the same time.
        $knowledgemap_rep = knowledgemap_make_km_rep($entity->nid);
        //Get allowed item types.
        $all_fields = field_info_fields();
        $allowed_item_types = list_allowed_values($all_fields['field_item_type']);
        $settings = array(
          'drawing_dom_id' => $drawing_dom_id,
          'km_nid' => $nid, //The nid of the KM being shown.
          'knowledgemap_rep' => $knowledgemap_rep,
          'mode' => 'view', //Viewing mode.
          'all_item_types' => $allowed_item_types,
        );
        //Cannot cache the settings file.
        drupal_add_js(
            array('knowledgemap' => $settings),
            'setting',
            array( 'cache' => FALSE, )
        );
      } // End for each.
      knowledgemap_add_client_code();
      break;
  } // End switch.
  return $element;
}

/**
 * Implements hook_node_save.
 */
function knowledgemap_node_presave( $node ) {
  if ( $node->type == 'learning_map' ) {
    //Make sure there is something in the field.
    $node->field_km[LANGUAGE_NONE][0]['value'] = 'place holder';
  }
}

require_once 'kmItem.inc';
require_once 'kmItemType.inc';

/**
 * Implements hook_book_copy_clone().
 * @param integer $original_km_nid Nid of original KM node.
 * @param integer $clone_km_nid Nid of cloned KM node.
 * @throws Exception Something bad happened.
 */
function knowledgemap_book_copy_clone($original_km_nid, $clone_km_nid) {
  $original_km_node = node_load($original_km_nid);
  if ( $original_km_node->type == 'learning_map' ) {
    //Need to duplicate all the attached learning items, ahte their connections.
    //Run the view showing KM items linked to the given KM.
    $view_results = views_get_view_result( 'items_related_to_km', 'default', 
        $original_km_nid );
    $original_km_items = array();
    $cloned_km_items = array();
    //Duplicate the KM item nodes, keeping a mapping from original to clones.
    foreach( $view_results as $record ) {
      //Remember original item
      $original_km_item = new KmItem(
                                $record->nid, 
                                $original_km_nid
                             );
      $cloned_km_item = $original_km_item->cloneItemIntoKm($clone_km_nid);
      //Keep the original and new items, with matching indices.
      $original_km_items[] = $original_km_item;
      $cloned_km_items[] = $cloned_km_item;
    }
    //Load all the connections.
    $view_results = views_get_view_result(
        'km_items_linked_to_other_km_items', 
        'default', 
        $original_km_nid
    );
    foreach ( $view_results as $record ) {
      //Fetch connection data.
      $entity = $record->_field_data['relation_node_rid']['entity'];
      $rid = $entity->rid;
      $from_nid = $entity->endpoints[LANGUAGE_NONE][0]['entity_id'];
      $to_nid = $entity->endpoints[LANGUAGE_NONE][1]['entity_id'];
      $required = $entity->field_required[LANGUAGE_NONE][0]['value'];    
      //Create a new relationship, replacing from/to nids with 
      //their cloned equivalents.
      //Find the index of the from node in the item node list.
      $from_index = '';
      foreach( $original_km_items as $index => $original_km_item ) {
        if ( $original_km_item->getNid() == $from_nid ) {
          $from_index = $index;
          break;
        }
      }
      if ( $from_index === '' ) {
        throw new Exception(
            'knowledgemap_book_copy_clone: canna find from_nid: ' . $from_nid
        );
      }
      //Find the index of the to node in the item node list.
      $to_index = '';
      foreach( $original_km_items as $index => $original_km_item ) {
        if ( $original_km_item->getNid() == $to_nid ) {
          $to_index = $index;
          break;
        }
      }
      if ( $to_index === '' ) {
        throw new Exception(
            'knowledgemap_book_copy_clone: canna find to_nid: ' . $to_nid
        );
      }
      //Get the substitute values to use for from/to.
      $clone_from_nid = $cloned_km_items[$from_index]->getNid();
      $clone_to_nid = $cloned_km_items[$to_index]->getNid();
      $endpoints = array(
        array('entity_type' => 'node', 'entity_id' => $clone_from_nid),
        array('entity_type' => 'node', 'entity_id' => $clone_to_nid),
      );
      //Create new relation object.
      $new_relation = relation_create(RELATION_NAME_KM_ITEM_CONNECTION, $endpoints);
      //Set the required field.
      $new_relation->field_required[LANGUAGE_NONE][0]['value'] = $required;
      //Save it.
      $rid = relation_save($new_relation);
      if ( $rid === FALSE ) {
        throw new Exception('knowledgemap_book_copy_clone: KM relationship creation failed.');
      }
    } // End for each connection. 
  } // End for KM.
} // End knowledgemap_book_copy_clone.