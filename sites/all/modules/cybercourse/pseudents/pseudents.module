<?php
/**
 * Flag showing whether the poses preview data (used with CKEditor) is dirty.
 */
define('POSES_PREVIW_DIRTY_FLAG_VAR', 'pseudents_poses_preview_dirty');
/**
 * Poses preview data used with CKEditor.
 */
define('POSES_PREVIEW_DATA_VAR', 'pseudents_poses_preview_data');


//function pseudents_init() {
//  drupal_add_css(
//    drupal_get_path('module', 'pseudents') . '/css/pseudents.css'
//  );
//}

/**
 * Implements hook_help().
 */
function pseudents_help($path, $arg) {
  switch ($path) {
      // Help for another path in the block module
    case 'admin/help#pseudents':
      return '<p>' . t('Helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Register the CKEditor plugin.
 */
function pseudents_ckeditor_plugin() {
  return array(
    'pseudent' => array(
      // Plugin name.
      'name' => 'pseudent',
      // Plugin description - it will be displayed in the plugins management section of the profile settings.
      'desc' => t('Cyco: Insert a pseudent into content.'),
      // The full path to the CKEditor plugin directory, trailing slash included.
      'path' => drupal_get_path('module', 'pseudents') . '/plugin/',
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function pseudents_permission() {
  return array(
    'administer pseudents' => array(
      'title' => t('Administer pseudents'),
      'description' => t('Create, delete, and update pseudents.')
    ),
//    'use pseudents in content' => array(
//      'title' => t('Use pseudents in content'),
//      'description' => t('Insert pseudent token in content.')
//    ),
  );
}

/**
* Implements hook_filter_info().
*/
//function pseudents_filter_info() {
//  $filters['filter_pseudents'] = array(
//    'title' => t('Pseudents'),
//    'description' => t('Replace pseudent tags'),
//    'process callback' => 'pseudents_process_filter',
//  );
//  return $filters;
//}

/**
 * Replace pseudent tokens with HTML.
 * @param type $text
 * @param type $filter
 * @param type $format
 * @param type $langcode
 * @return type
 */
//function pseudents_process_filter($text, $filter, $format = 'pseudents', $langcode = 'und') {
//  //Find all the pseudents on the page that are referred to.
//  $regex_matches = array();
//  $regex_match_count = preg_match_all("/\[\s*pseudent\s*\:\s*(.*?)\s*\]/i", 
//      $text, $regex_matches);
//  if ( $regex_match_count > 0 ) {
//    //Look up data for those pseudents.
//    $token_list = '';
//    foreach( $regex_matches[1] as $key => $match ) {
//      if ( $key > 0 ) {
//        $token_list .= ', ';
//      }
//      $token_list .= '\'' . check_plain($match) . '\'';
//    }
//    $sql = '
//        select field_token_value, field_caption_value, 
//          field_image_alt, field_image_width, field_image_height,
//          field_image_fid, file_managed.uri as uri
//        from field_data_field_token 
//          left join field_data_field_caption on 
//            field_data_field_token.entity_id 
//            = field_data_field_caption.entity_id
//          left join field_data_field_image on 
//            field_data_field_token.entity_id
//            = field_data_field_image.entity_id
//          inner join file_managed on file_managed.fid = field_image_fid
//          inner join node on field_data_field_token.entity_id
//            = node.nid
//        where 
//          node.status = 1
//          and field_data_field_token.bundle = \'pseudent_pose\'
//          and field_token_value in ( ' . $token_list . ' )
//    ';
//    $query_result = db_query($sql); //, array( ':token_list' => $token_list ));
//    if ( $query_result->rowCount() > 0 ) {
//      //Make an array of substitutions.
//      //Each entry has two parts:
//      //1. Token spec found in content.
//      //2. Complete HTML for it.
//      $substitutions = array();
//      foreach ( $regex_matches[1] as $regex_key => $regex_match ) {
//        //Find the token in the query result array.
//        $html = '';
//        foreach ( $query_result as $row ) {
//          //Must have a URI.
//          if ( $row->uri ) {
//            if ( $regex_match == $row->field_token_value ) {
//              //Compute the HTML.
//              $html = _pseudents_compute_char_html( $row );
//              //Add to substitutions array.
//              $substitutions[] = array(
//                'matched' => $regex_matches[0][$regex_key],
//                  //Note: this is the entire matched text, not the token.
//                'replacement' => $html,
//              );
//              break;
//            } //End if match
//          } //End there is a URI.
//        } //Loop across query results.
//      } //Loop across matches.
//      //Apply the substitutions.
//      foreach ( $substitutions as $substitution ) {
//        $text = str_replace(
//            $substitution['matched'], 
//            $substitution['replacement'], 
//            $text
//        );
//      }
//      //Count the closing tags.
//      $pattern = '/\[\s*\/\s*pseudent\s*\]/i';
//        //{, white space, /, white space, 'pseudent', white space, }
//      $closing_matches = array();
//      $closing_tag_count = preg_match_all($pattern, $text, $closing_matches);
//      if ( $closing_tag_count != $regex_match_count ) {
//        drupal_set_message(
//            'Please check for a missing or incorrect pseudent closing tag.', 
//            'warning'
//        );
//      }
//      //Replace the close tags.
//      $text = preg_replace($pattern, '</div>', $text);
//      //Store result in node object.
//    } //End there were query results.
//  } //End there were regex matches.
//  return $text;
//}

/*
 * Create HTML for a pseudent.
 */
//function _pseudents_compute_char_html( $query_result ) {
//  $html = 
//'<div class="cyco_pseudent" markdown="1">'
//  . '<div class="cyco_pseudent_figure">'
//  .   '<img src="' . file_create_url( $query_result->uri ) . '" '
//  .     'alt="' . t( $query_result->field_image_alt ) . '"  '
//  .     'height="' . check_plain( $query_result->field_image_height ) . '" '
//  .     'width="' . check_plain( $query_result->field_image_width ) . '" '
//  .   '>' 
//  .   '<div class="cyco_pseudent_figcaption">' 
//  .     t($query_result->field_caption_value) 
//  .   '</div>'
//  . '</div>';
//  return $html;
//}


function pseudents_get_editor_previews() {
  $pseudents_preview_dirty = variable_get(POSES_PREVIW_DIRTY_FLAG_VAR, TRUE);
  if ( $pseudents_preview_dirty ) {
    _pseudents_generate_ck_pseudent_table();
  }
  return variable_get(POSES_PREVIEW_DATA_VAR, 'none');
}

/**
 * Generate HTML for a table of pseudent poses to use in a CKEditor dialog.
 * The result is cached. 
 */
function _pseudents_generate_ck_pseudent_table() {
  //Fetch pseudent pose data.
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'pseudent_pose')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('title');
//    ->fieldOrderBy('field_token', 'value');
  $query_result = $query->execute();
  //Create the pseudent HTML.
  $pseudents = array();
  if ( isset($query_result['node']) ) {
    foreach ( $query_result['node'] as $nid => $value ) {
      $node = node_load($nid);
      $title = $node->title;
//      $token = $node->field_token[LANGUAGE_NONE][0]['safe_value'];
      $notes = $node->body[LANGUAGE_NONE][0]['summary'];
      //Caption is not a required field.
      if ( isset($node->field_caption[LANGUAGE_NONE][0]['safe_value']) ) {
        $caption = $node->field_caption[LANGUAGE_NONE][0]['safe_value'];
      }
      else {
        $caption = '';
      }
//      $uri = $node->field_image[LANGUAGE_NONE][0]['uri'];
//      $absolute_url = file_create_url( $uri );
//      //Convert to local URL.
//      //This will only work for Drupals in the root of sub/domain?
//      $url = parse_url($absolute_url);
//      $usable_url = $url['path'];
      $usable_url = _pseudents_uri_2_path(
          $node->field_image[LANGUAGE_NONE][0]['uri']
      );
      $pseudents[$nid] = array(
        'nid' => $nid,
        'title' => $title,
        'url' => $usable_url,
        'caption' => $caption,
      );
    }
  }
  if ( $pseudents == '' ) {
    variable_set(POSES_PREVIEW_DATA_VAR, 'none');
  }
  else {
    variable_set( POSES_PREVIEW_DATA_VAR, $pseudents );
  }
  variable_set(POSES_PREVIW_DIRTY_FLAG_VAR, FALSE);
}


//function _pseudents_generate_ck_select_data() {
//  //Fetch pseudent pose data.
//  $query = new EntityFieldQuery;
//  $query
//    ->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', 'pseudent_pose')
//    ->propertyCondition('status', 1)
//    ->fieldOrderBy('field_token', 'value');
//  $query_result = $query->execute();
//  //Fetch the pseudent names.
//  $pseudent_pose_previews = array();
//  if ( isset($query_result['node']) ) {
//    foreach ( $query_result['node'] as $nid => $value ) {
//      $node = node_load($nid);
//      $token = $node->field_token[LANGUAGE_NONE][0]['safe_value'];
//      //Caption is not a required field.
//      if ( isset($node->field_caption[LANGUAGE_NONE][0]['safe_value']) ) {
//        $caption = $node->field_caption[LANGUAGE_NONE][0]['safe_value'];
//      }
//      else {
//        $caption = '';
//      }
//      $uri = $node->field_image[LANGUAGE_NONE][0]['uri'];
//      $usable_url = file_create_url( $uri );
//      $preview_html = 
//          '<div class="pseudents_ck_preview">'
//          . '<div class="pseudents_ck_preview_image">'
//          .   '<img src="' . $usable_url . '" alt="' . $caption . '">'
//          .   '<div class="pseudents_ck_preview_caption">'
//          .     $caption
//          .   '</div>'
//          .  '</div>'
//          .  '<div class="pseudents_ck_preview_token">'
//          .     'Token:<br>' . $token . '<br><br>'
//          .  '</div>'
//          .'</div>'
//        ;
//      $pseudent_pose_previews[] = array(
//        'token' => $token,
//        'caption' => $caption,
//        'html' => $preview_html,
//      );
//    }
//  }
//  if ( sizeof($pseudent_pose_previews) == 0 ) {
//    variable_set(POSES_PREVIEW_DATA_VAR, 'none');
//  }
//  else {
//    variable_set( POSES_PREVIEW_DATA_VAR, $pseudent_pose_previews );
//  }
//  variable_set(POSES_PREVIW_DIRTY_FLAG_VAR, FALSE);
//}

/*
 * Set 'cache is dirty' flag when poses change.
 */
function pseudents_node_update( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function pseudents_node_delete( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function pseudents_node_insert( $node ) {
  _pseudents_set_dirty_flag( $node );
}

function _pseudents_set_dirty_flag( $node ) {
  if ( $node->type == 'pseudent_pose' ) {
    //Mark pseudent pose preview data used in editor as dirty.
    variable_set(POSES_PREVIW_DIRTY_FLAG_VAR, TRUE);
  }  
}


function pseudents_form_alter(&$form, &$form_state, $form_id) {
  // @todo Instead of checking form_id, check for a field
  //having the SWIM format? Cache the results of the check 
  //so don't run check again on this page call.
  //Not sure if this is the right approach.
  if ( stristr($form_id, 'node_form') !== FALSE ) {
    _pseudents_load_client_side_stuff();
  }
}

/**
 * Add client-side stuff the pseudent code needs.
 */
function _pseudents_load_client_side_stuff() {
  drupal_add_css(drupal_get_path('module', 'pseudents') . '/css/pseudents.css' );
  global $base_url;
  $css_path = $base_url . '/' . drupal_get_path('module', 'pseudents') . '/css/';
  $settings = array(
    'posePreviews' => pseudents_get_editor_previews(),
    'poseStylesheet' => $css_path . 'pseudents.css',
    'poseStylesheetEdit' => $css_path . 'pseudents_edit.css',
  );
  drupal_add_js(
      array('pseudents' => $settings),
      'setting'
  );
}

/**
 * Implements hook_form_alter().
 */
//function pseudents_form_pseudent_pose_node_form_alter( &$form, &$form_state ) {
//  $form['#validate'][] = '_pseudent_validate_pose_form';
//}

/**
 * Validate the pose data.
 */
//function _pseudent_validate_pose_form( &$form, &$form_state ) {
//  $token 
//      = $form_state['values']['field_token'][LANGUAGE_NONE][0]['value'];
//  // Verify that the token contains no disallowed pseudents.
//  if ( preg_match('/[^a-z0-9_]/', $token) ) {
//    form_set_error(
//        'field_token', 
//        t(  'Sorry, the token can contain only lowercase letters, numbers, '
//          . 'and underscores (_). E.g., "alia_hi".'
//        )
//    );
//    return;
//  }
//  //Check that the token in unique.
//  //Find nodes using that token.
//  $query = new EntityFieldQuery();
//  $query
//    ->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', 'pseudent_pose')
//    ->fieldCondition('field_token', 'value', $token);
//  $result = $query->execute();
//  if ( isset( $result['node'] ) ) {
//    //There is at least one node using the token.
//    if ( sizeof($result['node']) > 1 ) {
//      throw new Exception('pseudents module: duplicate tokens!');
//    }
//    list($nid) = array_keys($result['node']);
//    //Error if it is some other node.
//    if ( $form['#node']->nid != $nid ) {
//      form_set_error(
//          'field_token', 
//          t(   'Sorry, the value "' . $token . '" is already in use. Tokens must ' 
//             .  'be unique, e.g., "' . $token . '2".'
//           )
//      );
//      return;
//    }
//  } // End token in use.
//}


/**
 * Implements hook_edithtml_2_directive_alter().
 * @param string $content Content to change.
 */
function pseudents_edithtml_2_directive_alter( &$content ) {
  $r = 0;
  $regex = 
      '/\<div class\=\"pseudent\"\>\s*'
      .   '\<div class\=\"pseudent\-image\-container\"\>\s*'
      .       '\<img.*?data\-pseudent\-id\=\"(.*?)\".*?\>\s*'
      .       '\<div class\=\"pseudent-image-caption\"\>.*?' 
      .       '\<\/div\>\s*'
      .   '\<\/div\>\s*'
      .   '\<div class=\"pseudent\-content\"\>(.*?)\<\/div\>\s*'
      .'\<\/div\>/is';
    //? forl azy eval.
    //s option to include new lines.
  $content
    = preg_replace_callback($regex, '_pseudents_make_directive_replacements', $content);
}

function _pseudents_make_directive_replacements($matches) {
  $nid = $matches[1];
  $content = $matches[2];
  $replacement = 
      '.. pseudent:: ' . $nid . "\n\n"
    . '    ' . $content . "\n\n";
  return $replacement;
}

/**
 * Implements hook_cycomarkup_2_viewhtml().
 * 
 * Translate pseudent CyCo markup in $content to its 
 * viewHTML equivalent. 
 * 
 * [[[cycopseudent 666|||note]]]
 * 
 * See SWIM docs for more.
 */
function pseudents_cycomarkup_2_viewhtml_alter(&$content) {
  $d = 0;
//  [[[cycopseudent 365||| Nothing.]]]
  $regex = 
      '/\[\[\[cycopseudent\s*(\d*?)\|\|\|(.*?)\]\]\]/is';
  //? is for lazy match.
      //s option so it can contain new line chars.
  $content
    = preg_replace_callback($regex, '_pseudents_make_view_replacements', $content);
}

function _pseudents_make_view_replacements($matches) {
  $nid = $matches[1];
  $content = $matches[2];
  //Load pseudent data.
  $node = node_load($nid);
  if ( !$node ) {
    $message = '_pseudents_make_view_replacements: bad nid: ' . $nid;
    watchdog('pseudents', $message);
    throw new Exception($message);
  }
  $caption = '';
  if (sizeof( $node->field_caption ) > 0 ) {
    $caption = $node->field_caption[LANGUAGE_NONE][0]['value'];
  }
  $usable_url = _pseudents_uri_2_path(
     $node->field_image[LANGUAGE_NONE][0]['uri']
  );
  $html =   '<div class="pseudent">'
          .   '<div class="pseudent-image-container">'
          .     '<img class="pseudent-image" '
          .         'src="' . $usable_url . '" '
          .         'alt="' . $caption . '" >'
          .     '<div class="pseudent-image-caption">' 
          .       $caption
          .     '</div>'
          .   '</div>'
          .   '<div class="pseudent-content">' . $content . '</div>'
          . '</div>';
  return $html;
}

/**
 * Convert a Drupal URI to a URL usable on the Web.
 * @param string $uri Drupal URI
 * @return string Usable URL
 */
function _pseudents_uri_2_path( $uri ) {
  $absolute_url = file_create_url( $uri );
  //Convert to local URL.
  //This will only work for Drupals in the root of sub/domain?
  $url = parse_url($absolute_url);
  $usable_url = $url['path'];
  return $usable_url;
}


function pseudents_node_view($node, $view_mode, $langcode) {
  $t=5;
  if ( $node->type == 'pseudent_pose' ){
    if ( $view_mode == 'full' ) {
      $r=4;
          $node->content['pseudent_pose_link'] = array(
              '#markup' => l('Back to pseudent list', 'pseudent-poses'),
              '#weight' => ( $node->content['body']['#weight'] + 1 ) //BOOKTOPNAV_NAV_BAR_WEIGHT,
          );
    }
  }
}