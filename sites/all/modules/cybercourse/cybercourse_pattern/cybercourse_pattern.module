<?php

/**
 * Process callback for hook_filter. Finds [[[cycopattern (node_id)]]]
 * and passes match data onto function that will do the insertion.
 */
/**
 * Implements hook_cycomarkup_2_viewhtml().
 * 
 * Translate pattern CyCo markup in $content to its 
 * viewHTML equivalent. 
 * 
 * [[[cycopattern 123]]]
 * 
 * See SWIM docs for more.
 */
function cybercourse_pattern_cycomarkup_2_viewhtml_alter(&$content) {
  $regex = '/\[\[\[\s*cycopattern\s*(\d+)\s*\]\]\]/';
      //[[[, optional whitespace, cycopattern, optional whitespace, 
      //pattern number, optional whitespace, ]]]
  $content = preg_replace_callback( $regex,
      '_cybercourse_pattern_make_replacements', $content );
}

/**
 * Generates the HTML for the pattern.
 */ 
function _cybercourse_pattern_make_replacements($matches) {
  $pattern_nid = $matches[1];
  $pattern_node = node_load($pattern_nid);
  //Make sure that this is the right type of node.
  if (   $pattern_node == FALSE 
      || !node_access('view', $pattern_node) 
      || !$pattern_node->status
      || $pattern_node->type != 'pattern') {
    $message = t('Invalid pattern id: @id', array('@id' => $pattern_nid) );
    drupal_set_message($message);
    watchdog('cybercourse_pattern', $message);
    return '<p>' . $message . '</p>';
  }
  $situation = $pattern_node->field_situation[LANGUAGE_NONE][0]['value'] ?
      $pattern_node->field_situation[LANGUAGE_NONE][0]['value'] : '';
  $actions = $pattern_node->field_actions[LANGUAGE_NONE][0]['value'] ?
      $pattern_node->field_actions[LANGUAGE_NONE][0]['value'] : '';
  //Make pattern category links.
  $pattern_category_links = array();
  $pattern_category_links_rendered = '';
  if ( sizeof( $pattern_node->field_pattern_categories ) > 0 ) {
    $done_first = FALSE;
    foreach( $pattern_node->field_pattern_categories[LANGUAGE_NONE] as $item) {
      $tid = $item['tid'];
      $term = taxonomy_term_load($tid);
      $term_name = $term->name;
      $pattern_category_links[] = array('tid' => $tid, 'term' => $term_name);
      $path_to_term = drupal_lookup_path('alias', 'taxonomy/term/' . $tid);
      $link_html = l($term_name, $path_to_term );
      if ( $done_first ) {
        $pattern_category_links_rendered .= ', ';
      }
      $done_first = TRUE;
      $pattern_category_links_rendered .= $link_html;
    }
  }
  $result = theme('pattern_inserted', 
      array(
        'title' => $pattern_node->title,
        'category_links' => $pattern_category_links,
        'category_links_rendered' => $pattern_category_links_rendered,
        'situation' => $situation,
        'actions' => $actions,
        'more_link_destination' => '/node/' . $pattern_nid,
        'pattern_node' => $pattern_node,
      )
  );
  //Add CSS.
  global $base_url;
  drupal_add_css(
      $base_url . '/' . drupal_get_path('module', 'cybercourse_pattern') 
        . '/css/cybercourse_pattern.css'
  );
  return $result;
} 

/**
 * Implement hook_theme().
 * @return array
 */
function cybercourse_pattern_theme() {
  $result = array(
    'pattern_inserted' => array(
      'template' => 'cybercourse-pattern-insert',
      //Default variable values
      'variables' => array(
        'title' => '(no title)',
        'situation' => '(no situation)',
        'actions' => '(no actions)',
        'more_link_destination' => '',
        'pattern_node' => '',
      ),
    ),
  );
  return $result;
}